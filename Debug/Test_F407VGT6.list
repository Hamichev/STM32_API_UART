
Test_F407VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029e0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002b68  08002b68  00012b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b80  08002b80  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  08002b80  08002b80  00012b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b88  08002b88  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002b88  08002b88  00012b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08002b90  08002b90  00012b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          000007fc  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000800  20000800  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000066f1  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001525  00000000  00000000  00026725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f0  00000000  00000000  00027c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000648  00000000  00000000  00028340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af3c  00000000  00000000  00028988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000052ec  00000000  00000000  000438c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009684a  00000000  00000000  00048bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000df3fa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ba8  00000000  00000000  000df44c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002b50 	.word	0x08002b50

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08002b50 	.word	0x08002b50

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80004d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004d8:	4907      	ldr	r1, [pc, #28]	; (80004f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4313      	orrs	r3, r2
 80004de:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80004e0:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80004e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4013      	ands	r3, r2
 80004e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004ea:	68fb      	ldr	r3, [r7, #12]
}
 80004ec:	bf00      	nop
 80004ee:	3714      	adds	r7, #20
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	40023800 	.word	0x40023800

080004fc <_ZN6GPIO_t4InitEv>:

#include "alt_Inc/alt_GPIO.h"


void GPIO_t::Init()
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	if(this->m_SetFlag & (1 << GPIO_SET_GPIO)){
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	8b9b      	ldrh	r3, [r3, #28]
 8000508:	f003 0301 	and.w	r3, r3, #1
 800050c:	2b00      	cmp	r3, #0
 800050e:	d102      	bne.n	8000516 <_ZN6GPIO_t4InitEv+0x1a>
		;
	}
	else{
		this->m_GPIO = GPIOA; //default
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a33      	ldr	r2, [pc, #204]	; (80005e0 <_ZN6GPIO_t4InitEv+0xe4>)
 8000514:	601a      	str	r2, [r3, #0]
	}

	if(this->m_SetFlag & (1 << GPIO_SET_PIN)){
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	8b9b      	ldrh	r3, [r3, #28]
 800051a:	f003 0302 	and.w	r3, r3, #2
 800051e:	2b00      	cmp	r3, #0
 8000520:	d102      	bne.n	8000528 <_ZN6GPIO_t4InitEv+0x2c>
		;
	}
	else{
		this->m_Pin = LL_GPIO_PIN_0; //default
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2201      	movs	r2, #1
 8000526:	605a      	str	r2, [r3, #4]
	}

	if(this->m_SetFlag & (1 << GPIO_SET_MODE)){
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	8b9b      	ldrh	r3, [r3, #28]
 800052c:	f003 0304 	and.w	r3, r3, #4
 8000530:	2b00      	cmp	r3, #0
 8000532:	d102      	bne.n	800053a <_ZN6GPIO_t4InitEv+0x3e>
		;
	}
	else{
		this->m_Mode = LL_GPIO_MODE_ALTERNATE; //default
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2202      	movs	r2, #2
 8000538:	609a      	str	r2, [r3, #8]
	}

	if(this->m_SetFlag & (1 << GPIO_SET_SPEED)){
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	8b9b      	ldrh	r3, [r3, #28]
 800053e:	f003 0308 	and.w	r3, r3, #8
 8000542:	2b00      	cmp	r3, #0
 8000544:	d102      	bne.n	800054c <_ZN6GPIO_t4InitEv+0x50>
		;
	}
	else{
		this->m_Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH; //default
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2203      	movs	r2, #3
 800054a:	60da      	str	r2, [r3, #12]
	}

	if(this->m_SetFlag & (1 << GPIO_SET_OUTPUTTYPE)){
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	8b9b      	ldrh	r3, [r3, #28]
 8000550:	f003 0310 	and.w	r3, r3, #16
 8000554:	2b00      	cmp	r3, #0
 8000556:	d102      	bne.n	800055e <_ZN6GPIO_t4InitEv+0x62>
		;
	}
	else{
		this->m_OutputType = LL_GPIO_OUTPUT_PUSHPULL; //default
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2200      	movs	r2, #0
 800055c:	611a      	str	r2, [r3, #16]
	}

	if(this->m_SetFlag & (1 << GPIO_SET_PULL)){
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	8b9b      	ldrh	r3, [r3, #28]
 8000562:	f003 0320 	and.w	r3, r3, #32
 8000566:	2b00      	cmp	r3, #0
 8000568:	d102      	bne.n	8000570 <_ZN6GPIO_t4InitEv+0x74>
		;
	}
	else{
		this->m_Pull = LL_GPIO_PULL_NO; //default
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2200      	movs	r2, #0
 800056e:	615a      	str	r2, [r3, #20]
	}

	if(this->m_SetFlag & (1 << GPIO_SET_ALTERNATE)){
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	8b9b      	ldrh	r3, [r3, #28]
 8000574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000578:	2b00      	cmp	r3, #0
 800057a:	d102      	bne.n	8000582 <_ZN6GPIO_t4InitEv+0x86>
		;
	}
	else{
		this->m_Alternate = LL_GPIO_AF_8; //default
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2208      	movs	r2, #8
 8000580:	619a      	str	r2, [r3, #24]
	}

	if(this->m_SetFlag & (1 << GPIO_SET_ENABLECLOCK)){
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	8b9b      	ldrh	r3, [r3, #28]
 8000586:	b21b      	sxth	r3, r3
 8000588:	2b00      	cmp	r3, #0
 800058a:	db02      	blt.n	8000592 <_ZN6GPIO_t4InitEv+0x96>
		;
	}
	else{
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800058c:	2001      	movs	r0, #1
 800058e:	f7ff ff9d 	bl	80004cc <LL_AHB1_GRP1_EnableClock>
	}

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	f107 0308 	add.w	r3, r7, #8
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]
 80005a2:	615a      	str	r2, [r3, #20]

	GPIO_InitStruct.Pin = this->m_Pin;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = this->m_Mode;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	689b      	ldr	r3, [r3, #8]
 80005ae:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = this->m_Speed;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.OutputType = this->m_OutputType;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	691b      	ldr	r3, [r3, #16]
 80005ba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = this->m_Pull;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	695b      	ldr	r3, [r3, #20]
 80005c0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = this->m_Alternate;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	61fb      	str	r3, [r7, #28]
	LL_GPIO_Init(this->m_GPIO, &GPIO_InitStruct);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f107 0208 	add.w	r2, r7, #8
 80005d0:	4611      	mov	r1, r2
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fdcc 	bl	8002170 <LL_GPIO_Init>
}
 80005d8:	bf00      	nop
 80005da:	3720      	adds	r7, #32
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40020000 	.word	0x40020000

080005e4 <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm>:

void GPIO_t::Init(GPIO_TypeDef *gpio,uint32_t pin,uint32_t mode,uint32_t speed,uint32_t outputtype,uint32_t pull,uint32_t alternate)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
 80005f0:	603b      	str	r3, [r7, #0]
	if(gpio == GPIOA){
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	4a32      	ldr	r2, [pc, #200]	; (80006c0 <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm+0xdc>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d103      	bne.n	8000602 <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm+0x1e>
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80005fa:	2001      	movs	r0, #1
 80005fc:	f7ff ff66 	bl	80004cc <LL_AHB1_GRP1_EnableClock>
 8000600:	e03f      	b.n	8000682 <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm+0x9e>
	}
	else if(gpio == GPIOB){
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	4a2f      	ldr	r2, [pc, #188]	; (80006c4 <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm+0xe0>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d103      	bne.n	8000612 <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm+0x2e>
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800060a:	2002      	movs	r0, #2
 800060c:	f7ff ff5e 	bl	80004cc <LL_AHB1_GRP1_EnableClock>
 8000610:	e037      	b.n	8000682 <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm+0x9e>
	}
	else if(gpio == GPIOC){
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	4a2c      	ldr	r2, [pc, #176]	; (80006c8 <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm+0xe4>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d103      	bne.n	8000622 <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm+0x3e>
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800061a:	2004      	movs	r0, #4
 800061c:	f7ff ff56 	bl	80004cc <LL_AHB1_GRP1_EnableClock>
 8000620:	e02f      	b.n	8000682 <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm+0x9e>
	}
#if defined(GPIOD)
	else if(gpio == GPIOD){
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	4a29      	ldr	r2, [pc, #164]	; (80006cc <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm+0xe8>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d103      	bne.n	8000632 <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm+0x4e>
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800062a:	2008      	movs	r0, #8
 800062c:	f7ff ff4e 	bl	80004cc <LL_AHB1_GRP1_EnableClock>
 8000630:	e027      	b.n	8000682 <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm+0x9e>
	}
#endif
#if defined(GPIOE)
	else if(gpio == GPIOE){
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	4a26      	ldr	r2, [pc, #152]	; (80006d0 <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm+0xec>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d103      	bne.n	8000642 <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm+0x5e>
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 800063a:	2010      	movs	r0, #16
 800063c:	f7ff ff46 	bl	80004cc <LL_AHB1_GRP1_EnableClock>
 8000640:	e01f      	b.n	8000682 <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm+0x9e>
	}
#endif
#if defined(GPIOF)
	else if(gpio == GPIOF){
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	4a23      	ldr	r2, [pc, #140]	; (80006d4 <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm+0xf0>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d103      	bne.n	8000652 <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm+0x6e>
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 800064a:	2020      	movs	r0, #32
 800064c:	f7ff ff3e 	bl	80004cc <LL_AHB1_GRP1_EnableClock>
 8000650:	e017      	b.n	8000682 <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm+0x9e>
	}
#endif
#if defined(GPIOG)
	else if(gpio == GPIOG){
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	4a20      	ldr	r2, [pc, #128]	; (80006d8 <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm+0xf4>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d103      	bne.n	8000662 <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm+0x7e>
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
 800065a:	2040      	movs	r0, #64	; 0x40
 800065c:	f7ff ff36 	bl	80004cc <LL_AHB1_GRP1_EnableClock>
 8000660:	e00f      	b.n	8000682 <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm+0x9e>
	}
#endif
#if defined(GPIOH)
	else if(gpio == GPIOH){
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	4a1d      	ldr	r2, [pc, #116]	; (80006dc <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm+0xf8>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d103      	bne.n	8000672 <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm+0x8e>
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800066a:	2080      	movs	r0, #128	; 0x80
 800066c:	f7ff ff2e 	bl	80004cc <LL_AHB1_GRP1_EnableClock>
 8000670:	e007      	b.n	8000682 <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm+0x9e>
	}
#endif
#if defined(GPIOI)
	else if(gpio == GPIOI){
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm+0xfc>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d103      	bne.n	8000682 <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm+0x9e>
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOI);
 800067a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800067e:	f7ff ff25 	bl	80004cc <LL_AHB1_GRP1_EnableClock>
	}
#endif

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	f107 0310 	add.w	r3, r7, #16
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]
 8000692:	615a      	str	r2, [r3, #20]

	GPIO_InitStruct.Pin = pin;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = mode;
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = speed;
 800069c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800069e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.OutputType = outputtype;
 80006a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006a2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = pull;
 80006a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006a6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = alternate;
 80006a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
	LL_GPIO_Init(gpio, &GPIO_InitStruct);
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	4619      	mov	r1, r3
 80006b2:	68b8      	ldr	r0, [r7, #8]
 80006b4:	f001 fd5c 	bl	8002170 <LL_GPIO_Init>
}
 80006b8:	bf00      	nop
 80006ba:	3728      	adds	r7, #40	; 0x28
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40020000 	.word	0x40020000
 80006c4:	40020400 	.word	0x40020400
 80006c8:	40020800 	.word	0x40020800
 80006cc:	40020c00 	.word	0x40020c00
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40021400 	.word	0x40021400
 80006d8:	40021800 	.word	0x40021800
 80006dc:	40021c00 	.word	0x40021c00
 80006e0:	40022000 	.word	0x40022000

080006e4 <_ZN6GPIO_t9InitInputEP12GPIO_TypeDefmmm>:

void GPIO_t::InitInput(GPIO_TypeDef *gpio,uint32_t pin,uint32_t mode,uint32_t pull)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
 80006f0:	603b      	str	r3, [r7, #0]
	if(gpio == GPIOA){
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	4a35      	ldr	r2, [pc, #212]	; (80007cc <_ZN6GPIO_t9InitInputEP12GPIO_TypeDefmmm+0xe8>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d103      	bne.n	8000702 <_ZN6GPIO_t9InitInputEP12GPIO_TypeDefmmm+0x1e>
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80006fa:	2001      	movs	r0, #1
 80006fc:	f7ff fee6 	bl	80004cc <LL_AHB1_GRP1_EnableClock>
 8000700:	e03f      	b.n	8000782 <_ZN6GPIO_t9InitInputEP12GPIO_TypeDefmmm+0x9e>
	}
	else if(gpio == GPIOB){
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	4a32      	ldr	r2, [pc, #200]	; (80007d0 <_ZN6GPIO_t9InitInputEP12GPIO_TypeDefmmm+0xec>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d103      	bne.n	8000712 <_ZN6GPIO_t9InitInputEP12GPIO_TypeDefmmm+0x2e>
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800070a:	2002      	movs	r0, #2
 800070c:	f7ff fede 	bl	80004cc <LL_AHB1_GRP1_EnableClock>
 8000710:	e037      	b.n	8000782 <_ZN6GPIO_t9InitInputEP12GPIO_TypeDefmmm+0x9e>
	}
	else if(gpio == GPIOC){
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	4a2f      	ldr	r2, [pc, #188]	; (80007d4 <_ZN6GPIO_t9InitInputEP12GPIO_TypeDefmmm+0xf0>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d103      	bne.n	8000722 <_ZN6GPIO_t9InitInputEP12GPIO_TypeDefmmm+0x3e>
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800071a:	2004      	movs	r0, #4
 800071c:	f7ff fed6 	bl	80004cc <LL_AHB1_GRP1_EnableClock>
 8000720:	e02f      	b.n	8000782 <_ZN6GPIO_t9InitInputEP12GPIO_TypeDefmmm+0x9e>
	}
#if defined(GPIOD)
	else if(gpio == GPIOD){
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	4a2c      	ldr	r2, [pc, #176]	; (80007d8 <_ZN6GPIO_t9InitInputEP12GPIO_TypeDefmmm+0xf4>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d103      	bne.n	8000732 <_ZN6GPIO_t9InitInputEP12GPIO_TypeDefmmm+0x4e>
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800072a:	2008      	movs	r0, #8
 800072c:	f7ff fece 	bl	80004cc <LL_AHB1_GRP1_EnableClock>
 8000730:	e027      	b.n	8000782 <_ZN6GPIO_t9InitInputEP12GPIO_TypeDefmmm+0x9e>
	}
#endif
#if defined(GPIOE)
	else if(gpio == GPIOE){
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	4a29      	ldr	r2, [pc, #164]	; (80007dc <_ZN6GPIO_t9InitInputEP12GPIO_TypeDefmmm+0xf8>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d103      	bne.n	8000742 <_ZN6GPIO_t9InitInputEP12GPIO_TypeDefmmm+0x5e>
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 800073a:	2010      	movs	r0, #16
 800073c:	f7ff fec6 	bl	80004cc <LL_AHB1_GRP1_EnableClock>
 8000740:	e01f      	b.n	8000782 <_ZN6GPIO_t9InitInputEP12GPIO_TypeDefmmm+0x9e>
	}
#endif
#if defined(GPIOF)
	else if(gpio == GPIOF){
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	4a26      	ldr	r2, [pc, #152]	; (80007e0 <_ZN6GPIO_t9InitInputEP12GPIO_TypeDefmmm+0xfc>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d103      	bne.n	8000752 <_ZN6GPIO_t9InitInputEP12GPIO_TypeDefmmm+0x6e>
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 800074a:	2020      	movs	r0, #32
 800074c:	f7ff febe 	bl	80004cc <LL_AHB1_GRP1_EnableClock>
 8000750:	e017      	b.n	8000782 <_ZN6GPIO_t9InitInputEP12GPIO_TypeDefmmm+0x9e>
	}
#endif
#if defined(GPIOG)
	else if(gpio == GPIOG){
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	4a23      	ldr	r2, [pc, #140]	; (80007e4 <_ZN6GPIO_t9InitInputEP12GPIO_TypeDefmmm+0x100>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d103      	bne.n	8000762 <_ZN6GPIO_t9InitInputEP12GPIO_TypeDefmmm+0x7e>
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
 800075a:	2040      	movs	r0, #64	; 0x40
 800075c:	f7ff feb6 	bl	80004cc <LL_AHB1_GRP1_EnableClock>
 8000760:	e00f      	b.n	8000782 <_ZN6GPIO_t9InitInputEP12GPIO_TypeDefmmm+0x9e>
	}
#endif
#if defined(GPIOH)
	else if(gpio == GPIOH){
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	4a20      	ldr	r2, [pc, #128]	; (80007e8 <_ZN6GPIO_t9InitInputEP12GPIO_TypeDefmmm+0x104>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d103      	bne.n	8000772 <_ZN6GPIO_t9InitInputEP12GPIO_TypeDefmmm+0x8e>
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800076a:	2080      	movs	r0, #128	; 0x80
 800076c:	f7ff feae 	bl	80004cc <LL_AHB1_GRP1_EnableClock>
 8000770:	e007      	b.n	8000782 <_ZN6GPIO_t9InitInputEP12GPIO_TypeDefmmm+0x9e>
	}
#endif
#if defined(GPIOI)
	else if(gpio == GPIOI){
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	4a1d      	ldr	r2, [pc, #116]	; (80007ec <_ZN6GPIO_t9InitInputEP12GPIO_TypeDefmmm+0x108>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d103      	bne.n	8000782 <_ZN6GPIO_t9InitInputEP12GPIO_TypeDefmmm+0x9e>
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOI);
 800077a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800077e:	f7ff fea5 	bl	80004cc <LL_AHB1_GRP1_EnableClock>
	}
#endif

	this->m_GPIO = gpio;
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	68ba      	ldr	r2, [r7, #8]
 8000786:	601a      	str	r2, [r3, #0]
	this->m_Pin = pin;
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	605a      	str	r2, [r3, #4]
	this->m_Mode = mode;
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	683a      	ldr	r2, [r7, #0]
 8000792:	609a      	str	r2, [r3, #8]
	this->m_Pull = pull;
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000798:	615a      	str	r2, [r3, #20]

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 0310 	add.w	r3, r7, #16
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]
 80007aa:	615a      	str	r2, [r3, #20]

	GPIO_InitStruct.Pin = pin;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = mode;
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = pull;
 80007b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007b6:	623b      	str	r3, [r7, #32]
	LL_GPIO_Init(gpio, &GPIO_InitStruct);
 80007b8:	f107 0310 	add.w	r3, r7, #16
 80007bc:	4619      	mov	r1, r3
 80007be:	68b8      	ldr	r0, [r7, #8]
 80007c0:	f001 fcd6 	bl	8002170 <LL_GPIO_Init>
}
 80007c4:	bf00      	nop
 80007c6:	3728      	adds	r7, #40	; 0x28
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40020000 	.word	0x40020000
 80007d0:	40020400 	.word	0x40020400
 80007d4:	40020800 	.word	0x40020800
 80007d8:	40020c00 	.word	0x40020c00
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40021400 	.word	0x40021400
 80007e4:	40021800 	.word	0x40021800
 80007e8:	40021c00 	.word	0x40021c00
 80007ec:	40022000 	.word	0x40022000

080007f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <__NVIC_GetPriorityGrouping+0x18>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	0a1b      	lsrs	r3, r3, #8
 80007fa:	f003 0307 	and.w	r3, r3, #7
}
 80007fe:	4618      	mov	r0, r3
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	2b00      	cmp	r3, #0
 800081c:	db0b      	blt.n	8000836 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	f003 021f 	and.w	r2, r3, #31
 8000824:	4907      	ldr	r1, [pc, #28]	; (8000844 <__NVIC_EnableIRQ+0x38>)
 8000826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082a:	095b      	lsrs	r3, r3, #5
 800082c:	2001      	movs	r0, #1
 800082e:	fa00 f202 	lsl.w	r2, r0, r2
 8000832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000e100 	.word	0xe000e100

08000848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	6039      	str	r1, [r7, #0]
 8000852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000858:	2b00      	cmp	r3, #0
 800085a:	db0a      	blt.n	8000872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	b2da      	uxtb	r2, r3
 8000860:	490c      	ldr	r1, [pc, #48]	; (8000894 <__NVIC_SetPriority+0x4c>)
 8000862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000866:	0112      	lsls	r2, r2, #4
 8000868:	b2d2      	uxtb	r2, r2
 800086a:	440b      	add	r3, r1
 800086c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000870:	e00a      	b.n	8000888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4908      	ldr	r1, [pc, #32]	; (8000898 <__NVIC_SetPriority+0x50>)
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	f003 030f 	and.w	r3, r3, #15
 800087e:	3b04      	subs	r3, #4
 8000880:	0112      	lsls	r2, r2, #4
 8000882:	b2d2      	uxtb	r2, r2
 8000884:	440b      	add	r3, r1
 8000886:	761a      	strb	r2, [r3, #24]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	e000e100 	.word	0xe000e100
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800089c:	b480      	push	{r7}
 800089e:	b089      	sub	sp, #36	; 0x24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	f1c3 0307 	rsb	r3, r3, #7
 80008b6:	2b04      	cmp	r3, #4
 80008b8:	bf28      	it	cs
 80008ba:	2304      	movcs	r3, #4
 80008bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	3304      	adds	r3, #4
 80008c2:	2b06      	cmp	r3, #6
 80008c4:	d902      	bls.n	80008cc <NVIC_EncodePriority+0x30>
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	3b03      	subs	r3, #3
 80008ca:	e000      	b.n	80008ce <NVIC_EncodePriority+0x32>
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d0:	2201      	movs	r2, #1
 80008d2:	69bb      	ldr	r3, [r7, #24]
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	1e5a      	subs	r2, r3, #1
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	401a      	ands	r2, r3
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e2:	2101      	movs	r1, #1
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ea:	1e59      	subs	r1, r3, #1
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	400b      	ands	r3, r1
         );
 80008f0:	4313      	orrs	r3, r2
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3724      	adds	r7, #36	; 0x24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
	...

08000900 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <LL_APB1_GRP1_EnableClock+0x2c>)
 800090a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800090c:	4907      	ldr	r1, [pc, #28]	; (800092c <LL_APB1_GRP1_EnableClock+0x2c>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4313      	orrs	r3, r2
 8000912:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000916:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4013      	ands	r3, r2
 800091c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800091e:	68fb      	ldr	r3, [r7, #12]
}
 8000920:	bf00      	nop
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	40023800 	.word	0x40023800

08000930 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <LL_APB2_GRP1_EnableClock+0x2c>)
 800093a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800093c:	4907      	ldr	r1, [pc, #28]	; (800095c <LL_APB2_GRP1_EnableClock+0x2c>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4313      	orrs	r3, r2
 8000942:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000946:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4013      	ands	r3, r2
 800094c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800094e:	68fb      	ldr	r3, [r7, #12]
}
 8000950:	bf00      	nop
 8000952:	3714      	adds	r7, #20
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	40023800 	.word	0x40023800

08000960 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	60da      	str	r2, [r3, #12]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	691b      	ldr	r3, [r3, #16]
 800098c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	695b      	ldr	r3, [r3, #20]
 8000998:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	615a      	str	r2, [r3, #20]
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009bc:	2b80      	cmp	r3, #128	; 0x80
 80009be:	bf0c      	ite	eq
 80009c0:	2301      	moveq	r3, #1
 80009c2:	2300      	movne	r3, #0
 80009c4:	b2db      	uxtb	r3, r3
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80009d2:	b480      	push	{r7}
 80009d4:	b089      	sub	sp, #36	; 0x24
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	330c      	adds	r3, #12
 80009de:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	e853 3f00 	ldrex	r3, [r3]
 80009e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	f043 0320 	orr.w	r3, r3, #32
 80009ee:	61fb      	str	r3, [r7, #28]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	330c      	adds	r3, #12
 80009f4:	69fa      	ldr	r2, [r7, #28]
 80009f6:	61ba      	str	r2, [r7, #24]
 80009f8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80009fa:	6979      	ldr	r1, [r7, #20]
 80009fc:	69ba      	ldr	r2, [r7, #24]
 80009fe:	e841 2300 	strex	r3, r2, [r1]
 8000a02:	613b      	str	r3, [r7, #16]
   return(result);
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	bf14      	ite	ne
 8000a0a:	2301      	movne	r3, #1
 8000a0c:	2300      	moveq	r3, #0
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d000      	beq.n	8000a16 <LL_USART_EnableIT_RXNE+0x44>
 8000a14:	e7e1      	b.n	80009da <LL_USART_EnableIT_RXNE+0x8>
}
 8000a16:	bf00      	nop
 8000a18:	3724      	adds	r7, #36	; 0x24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000a22:	b480      	push	{r7}
 8000a24:	b083      	sub	sp, #12
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000a2e:	78fa      	ldrb	r2, [r7, #3]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	605a      	str	r2, [r3, #4]
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <_ZN6UART_t4InitEv>:


#include "alt_Inc/alt_UART.h"

void UART_t::Init()
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	; 0x28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	if(this->m_SetFlag & (1 << UART_SET_UART)){
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	; 0x1ac
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d102      	bne.n	8000a5c <_ZN6UART_t4InitEv+0x1c>
		;
	}
	else{
		this->m_UART = UART4; //default
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a66      	ldr	r2, [pc, #408]	; (8000bf4 <_ZN6UART_t4InitEv+0x1b4>)
 8000a5a:	605a      	str	r2, [r3, #4]
	}

	if(this->m_SetFlag & (1 << UART_SET_BAUDRATE)){
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	; 0x1ac
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d103      	bne.n	8000a72 <_ZN6UART_t4InitEv+0x32>
		;
	}
	else{
		this->m_BaudRate = 115200; //default
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a70:	609a      	str	r2, [r3, #8]
	}

	if(this->m_SetFlag & (1 << UART_SET_DATAWIDTH)){
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	; 0x1ac
 8000a78:	f003 0304 	and.w	r3, r3, #4
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d102      	bne.n	8000a86 <_ZN6UART_t4InitEv+0x46>
		;
	}
	else{
		this->m_DataWidth = LL_USART_DATAWIDTH_8B; //default
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
	}

	if(this->m_SetFlag & (1 << UART_SET_STOPBITS)){
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	; 0x1ac
 8000a8c:	f003 0308 	and.w	r3, r3, #8
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d102      	bne.n	8000a9a <_ZN6UART_t4InitEv+0x5a>
		;
	}
	else{
		this->m_StopBits = LL_USART_STOPBITS_1; //default
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
	}

	if(this->m_SetFlag & (1 << UART_SET_PARITY)){
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	; 0x1ac
 8000aa0:	f003 0310 	and.w	r3, r3, #16
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d102      	bne.n	8000aae <_ZN6UART_t4InitEv+0x6e>
		;
	}
	else{
		this->m_Parity = LL_USART_PARITY_NONE; //default
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	615a      	str	r2, [r3, #20]
	}

	if(this->m_SetFlag & (1 << UART_SET_TRANSFERDIRECTION)){
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	; 0x1ac
 8000ab4:	f003 0320 	and.w	r3, r3, #32
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d102      	bne.n	8000ac2 <_ZN6UART_t4InitEv+0x82>
		;
	}
	else{
		this->m_TransferDirection = LL_USART_DIRECTION_TX_RX; //default
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	220c      	movs	r2, #12
 8000ac0:	619a      	str	r2, [r3, #24]
	}

	if(this->m_SetFlag & (1 << UART_SET_HARDWAREFLOWCONTROL)){
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	; 0x1ac
 8000ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d102      	bne.n	8000ad6 <_ZN6UART_t4InitEv+0x96>
		;
	}
	else{
		this->m_HardwareFlowControl = LL_USART_HWCONTROL_NONE; //default
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
	}

	if(this->m_SetFlag & (1 << UART_SET_OVERSEMPLING)){
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	; 0x1ac
 8000adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d102      	bne.n	8000aea <_ZN6UART_t4InitEv+0xaa>
		;
	}
	else{
		this->m_OverSampling = LL_USART_OVERSAMPLING_16; //default
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	621a      	str	r2, [r3, #32]
	}

	if(this->m_SetFlag & (1 << UART_SET_ENABLECLOCK)){
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	; 0x1ac
 8000af0:	b21b      	sxth	r3, r3
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	db32      	blt.n	8000b5c <_ZN6UART_t4InitEv+0x11c>
		;
	}
	else{
		switch((uint32_t)this->m_UART){
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	4a3f      	ldr	r2, [pc, #252]	; (8000bf8 <_ZN6UART_t4InitEv+0x1b8>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d015      	beq.n	8000b2c <_ZN6UART_t4InitEv+0xec>
 8000b00:	4a3d      	ldr	r2, [pc, #244]	; (8000bf8 <_ZN6UART_t4InitEv+0x1b8>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d82a      	bhi.n	8000b5c <_ZN6UART_t4InitEv+0x11c>
 8000b06:	4a3d      	ldr	r2, [pc, #244]	; (8000bfc <_ZN6UART_t4InitEv+0x1bc>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d022      	beq.n	8000b52 <_ZN6UART_t4InitEv+0x112>
 8000b0c:	4a3b      	ldr	r2, [pc, #236]	; (8000bfc <_ZN6UART_t4InitEv+0x1bc>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d824      	bhi.n	8000b5c <_ZN6UART_t4InitEv+0x11c>
 8000b12:	4a38      	ldr	r2, [pc, #224]	; (8000bf4 <_ZN6UART_t4InitEv+0x1b4>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d017      	beq.n	8000b48 <_ZN6UART_t4InitEv+0x108>
 8000b18:	4a36      	ldr	r2, [pc, #216]	; (8000bf4 <_ZN6UART_t4InitEv+0x1b4>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d81e      	bhi.n	8000b5c <_ZN6UART_t4InitEv+0x11c>
 8000b1e:	4a38      	ldr	r2, [pc, #224]	; (8000c00 <_ZN6UART_t4InitEv+0x1c0>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d007      	beq.n	8000b34 <_ZN6UART_t4InitEv+0xf4>
 8000b24:	4a37      	ldr	r2, [pc, #220]	; (8000c04 <_ZN6UART_t4InitEv+0x1c4>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d009      	beq.n	8000b3e <_ZN6UART_t4InitEv+0xfe>
 8000b2a:	e017      	b.n	8000b5c <_ZN6UART_t4InitEv+0x11c>
		case (uint32_t)USART1_BASE:
			LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000b2c:	2010      	movs	r0, #16
 8000b2e:	f7ff feff 	bl	8000930 <LL_APB2_GRP1_EnableClock>
			break;
 8000b32:	e013      	b.n	8000b5c <_ZN6UART_t4InitEv+0x11c>
		case (uint32_t)USART2_BASE:
			LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000b34:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b38:	f7ff fee2 	bl	8000900 <LL_APB1_GRP1_EnableClock>
			break;
 8000b3c:	e00e      	b.n	8000b5c <_ZN6UART_t4InitEv+0x11c>
		case (uint32_t)USART3_BASE:
			LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8000b3e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000b42:	f7ff fedd 	bl	8000900 <LL_APB1_GRP1_EnableClock>
			break;
 8000b46:	e009      	b.n	8000b5c <_ZN6UART_t4InitEv+0x11c>
		case (uint32_t)UART4_BASE:
			LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8000b48:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000b4c:	f7ff fed8 	bl	8000900 <LL_APB1_GRP1_EnableClock>
			break;
 8000b50:	e004      	b.n	8000b5c <_ZN6UART_t4InitEv+0x11c>
		case (uint32_t)UART5_BASE:
			LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8000b52:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b56:	f7ff fed3 	bl	8000900 <LL_APB1_GRP1_EnableClock>
			break;
 8000b5a:	bf00      	nop
		}
	}

	if(this->m_SetFlag & (1 << UART_SET_IRQ)){
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	; 0x1ac
 8000b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d103      	bne.n	8000b72 <_ZN6UART_t4InitEv+0x132>
		;
	}
	else{
		this->m_Irq = UART4_IRQn; //default
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2234      	movs	r2, #52	; 0x34
 8000b6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}

	this->OnIRQ(this->m_Irq);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8000b78:	4619      	mov	r1, r3
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f000 f992 	bl	8000ea4 <_ZN6UART_t5OnIRQE9IRQn_Type>

	LL_USART_EnableIT_RXNE(this->m_UART);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff24 	bl	80009d2 <LL_USART_EnableIT_RXNE>

	LL_USART_InitTypeDef USART_InitStruct = {0};
 8000b8a:	f107 030c 	add.w	r3, r7, #12
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
 8000b98:	611a      	str	r2, [r3, #16]
 8000b9a:	615a      	str	r2, [r3, #20]
 8000b9c:	619a      	str	r2, [r3, #24]

	USART_InitStruct.BaudRate = this->m_BaudRate;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	60fb      	str	r3, [r7, #12]
	USART_InitStruct.DataWidth = this->m_DataWidth;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	613b      	str	r3, [r7, #16]
	USART_InitStruct.StopBits = this->m_StopBits;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	691b      	ldr	r3, [r3, #16]
 8000bae:	617b      	str	r3, [r7, #20]
	USART_InitStruct.Parity = this->m_Parity;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	695b      	ldr	r3, [r3, #20]
 8000bb4:	61bb      	str	r3, [r7, #24]
	USART_InitStruct.TransferDirection = this->m_TransferDirection;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.HardwareFlowControl = this->m_HardwareFlowControl;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	69db      	ldr	r3, [r3, #28]
 8000bc0:	623b      	str	r3, [r7, #32]
	USART_InitStruct.OverSampling = this->m_OverSampling;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6a1b      	ldr	r3, [r3, #32]
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
	LL_USART_Init(this->m_UART, &USART_InitStruct);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f107 020c 	add.w	r2, r7, #12
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f001 fee0 	bl	8002998 <LL_USART_Init>
	LL_USART_ConfigAsyncMode(this->m_UART);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fecf 	bl	8000980 <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(this->m_UART);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff feba 	bl	8000960 <LL_USART_Enable>
}
 8000bec:	bf00      	nop
 8000bee:	3728      	adds	r7, #40	; 0x28
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40004c00 	.word	0x40004c00
 8000bf8:	40011000 	.word	0x40011000
 8000bfc:	40005000 	.word	0x40005000
 8000c00:	40004400 	.word	0x40004400
 8000c04:	40004800 	.word	0x40004800

08000c08 <_ZN6UART_t4InitEP13USART_TypeDefmmmmmmm9IRQn_Type>:

void UART_t::Init(USART_TypeDef *uart,uint32_t baudrate,uint32_t datawidth,uint32_t stopbits,uint32_t parity,
			  uint32_t transferdirection,uint32_t hardwareflowcontrol,uint32_t oversampling,IRQn_Type irq)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08c      	sub	sp, #48	; 0x30
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
 8000c14:	603b      	str	r3, [r7, #0]
	this->m_UART = uart;
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	68ba      	ldr	r2, [r7, #8]
 8000c1a:	605a      	str	r2, [r3, #4]
	this->m_BaudRate = baudrate;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	609a      	str	r2, [r3, #8]
	this->m_DataWidth = datawidth;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	683a      	ldr	r2, [r7, #0]
 8000c26:	60da      	str	r2, [r3, #12]
	this->m_StopBits = stopbits;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000c2c:	611a      	str	r2, [r3, #16]
	this->m_Parity = parity;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c32:	615a      	str	r2, [r3, #20]
	this->m_TransferDirection = transferdirection;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000c38:	619a      	str	r2, [r3, #24]
	this->m_HardwareFlowControl = hardwareflowcontrol;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c3e:	61da      	str	r2, [r3, #28]
	this->m_OverSampling = oversampling;
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c44:	621a      	str	r2, [r3, #32]
	this->m_Irq = irq;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8000c4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	this->m_SetFlag = (1 << UART_SET_UART) | (1 << UART_SET_BAUDRATE) | (1 << UART_SET_DATAWIDTH) | (1 << UART_SET_STOPBITS) |
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f248 12ff 	movw	r2, #33279	; 0x81ff
 8000c56:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac
					  (1 << UART_SET_PARITY) | (1 << UART_SET_TRANSFERDIRECTION) | (1 << UART_SET_HARDWAREFLOWCONTROL) | (1 << UART_SET_OVERSEMPLING) |
					  (1 << UART_SET_IRQ) | (1 << UART_SET_ENABLECLOCK);

	if(uart == USART1){
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	4a2d      	ldr	r2, [pc, #180]	; (8000d14 <_ZN6UART_t4InitEP13USART_TypeDefmmmmmmm9IRQn_Type+0x10c>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d103      	bne.n	8000c6a <_ZN6UART_t4InitEP13USART_TypeDefmmmmmmm9IRQn_Type+0x62>
		LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000c62:	2010      	movs	r0, #16
 8000c64:	f7ff fe64 	bl	8000930 <LL_APB2_GRP1_EnableClock>
 8000c68:	e022      	b.n	8000cb0 <_ZN6UART_t4InitEP13USART_TypeDefmmmmmmm9IRQn_Type+0xa8>
	}
	else if(uart == USART2){
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	4a2a      	ldr	r2, [pc, #168]	; (8000d18 <_ZN6UART_t4InitEP13USART_TypeDefmmmmmmm9IRQn_Type+0x110>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d104      	bne.n	8000c7c <_ZN6UART_t4InitEP13USART_TypeDefmmmmmmm9IRQn_Type+0x74>
		LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000c72:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000c76:	f7ff fe43 	bl	8000900 <LL_APB1_GRP1_EnableClock>
 8000c7a:	e019      	b.n	8000cb0 <_ZN6UART_t4InitEP13USART_TypeDefmmmmmmm9IRQn_Type+0xa8>
	}
	else if(uart == USART3){
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	4a27      	ldr	r2, [pc, #156]	; (8000d1c <_ZN6UART_t4InitEP13USART_TypeDefmmmmmmm9IRQn_Type+0x114>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d104      	bne.n	8000c8e <_ZN6UART_t4InitEP13USART_TypeDefmmmmmmm9IRQn_Type+0x86>
		LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8000c84:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000c88:	f7ff fe3a 	bl	8000900 <LL_APB1_GRP1_EnableClock>
 8000c8c:	e010      	b.n	8000cb0 <_ZN6UART_t4InitEP13USART_TypeDefmmmmmmm9IRQn_Type+0xa8>
	}
	else if(uart == UART4){
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	4a23      	ldr	r2, [pc, #140]	; (8000d20 <_ZN6UART_t4InitEP13USART_TypeDefmmmmmmm9IRQn_Type+0x118>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d104      	bne.n	8000ca0 <_ZN6UART_t4InitEP13USART_TypeDefmmmmmmm9IRQn_Type+0x98>
		LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8000c96:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000c9a:	f7ff fe31 	bl	8000900 <LL_APB1_GRP1_EnableClock>
 8000c9e:	e007      	b.n	8000cb0 <_ZN6UART_t4InitEP13USART_TypeDefmmmmmmm9IRQn_Type+0xa8>
	}
	else if(uart == UART5){
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	4a20      	ldr	r2, [pc, #128]	; (8000d24 <_ZN6UART_t4InitEP13USART_TypeDefmmmmmmm9IRQn_Type+0x11c>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d103      	bne.n	8000cb0 <_ZN6UART_t4InitEP13USART_TypeDefmmmmmmm9IRQn_Type+0xa8>
		LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8000ca8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000cac:	f7ff fe28 	bl	8000900 <LL_APB1_GRP1_EnableClock>
	}

	this->OnIRQ(irq);
 8000cb0:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	68f8      	ldr	r0, [r7, #12]
 8000cb8:	f000 f8f4 	bl	8000ea4 <_ZN6UART_t5OnIRQE9IRQn_Type>

	LL_USART_EnableIT_RXNE(uart);
 8000cbc:	68b8      	ldr	r0, [r7, #8]
 8000cbe:	f7ff fe88 	bl	80009d2 <LL_USART_EnableIT_RXNE>

	LL_USART_InitTypeDef USART_InitStruct = {0};
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]
 8000cd2:	615a      	str	r2, [r3, #20]
 8000cd4:	619a      	str	r2, [r3, #24]

	USART_InitStruct.BaudRate = baudrate;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	617b      	str	r3, [r7, #20]
	USART_InitStruct.DataWidth = datawidth;
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	61bb      	str	r3, [r7, #24]
	USART_InitStruct.StopBits = stopbits;
 8000cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ce0:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.Parity = parity;
 8000ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ce4:	623b      	str	r3, [r7, #32]
	USART_InitStruct.TransferDirection = transferdirection;
 8000ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
	USART_InitStruct.HardwareFlowControl = hardwareflowcontrol;
 8000cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28
	USART_InitStruct.OverSampling = oversampling;
 8000cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
	LL_USART_Init(uart, &USART_InitStruct);
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	68b8      	ldr	r0, [r7, #8]
 8000cfa:	f001 fe4d 	bl	8002998 <LL_USART_Init>
	LL_USART_ConfigAsyncMode(uart);
 8000cfe:	68b8      	ldr	r0, [r7, #8]
 8000d00:	f7ff fe3e 	bl	8000980 <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(uart);
 8000d04:	68b8      	ldr	r0, [r7, #8]
 8000d06:	f7ff fe2b 	bl	8000960 <LL_USART_Enable>
}
 8000d0a:	bf00      	nop
 8000d0c:	3730      	adds	r7, #48	; 0x30
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40011000 	.word	0x40011000
 8000d18:	40004400 	.word	0x40004400
 8000d1c:	40004800 	.word	0x40004800
 8000d20:	40004c00 	.word	0x40004c00
 8000d24:	40005000 	.word	0x40005000

08000d28 <_ZN6UART_t14AddReceiveDataEh>:

void UART_t::AddReceiveData(uint8_t dt)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	70fb      	strb	r3, [r7, #3]
	if(this->m_status_rx == STATUS_RX_FULL_RX_BUF_EMPTY || this->m_status_rx == STATUS_RX_EMPTY_RX_BUF_ANY){
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d004      	beq.n	8000d48 <_ZN6UART_t14AddReceiveDataEh+0x20>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d129      	bne.n	8000d9c <_ZN6UART_t14AddReceiveDataEh+0x74>
		if(this->m_size_rx < RX_SIZE){
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000d4c:	2b7f      	cmp	r3, #127	; 0x7f
 8000d4e:	d80c      	bhi.n	8000d6a <_ZN6UART_t14AddReceiveDataEh+0x42>
			this->m_rx_reserve[this->m_size_rx++] = dt;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000d54:	1c5a      	adds	r2, r3, #1
 8000d56:	b291      	uxth	r1, r2
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	78fa      	ldrb	r2, [r7, #3]
 8000d64:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		if(this->m_size_rx < RX_SIZE){
 8000d68:	e03d      	b.n	8000de6 <_ZN6UART_t14AddReceiveDataEh+0xbe>
		}
		else{
			if(this->m_status_rx == STATUS_RX_EMPTY_RX_BUF_ANY){
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d138      	bne.n	8000de6 <_ZN6UART_t14AddReceiveDataEh+0xbe>
				this->m_status_rx = STATUS_RX_EMPTY_RX_BUF_FULL;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2203      	movs	r2, #3
 8000d78:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
				this->m_size_rx = 0;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	84da      	strh	r2, [r3, #38]	; 0x26
				this->m_rx[this->m_size_rx++] = dt;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000d86:	1c5a      	adds	r2, r3, #1
 8000d88:	b291      	uxth	r1, r2
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8000d8e:	461a      	mov	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4413      	add	r3, r2
 8000d94:	78fa      	ldrb	r2, [r7, #3]
 8000d96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		if(this->m_size_rx < RX_SIZE){
 8000d9a:	e024      	b.n	8000de6 <_ZN6UART_t14AddReceiveDataEh+0xbe>
				; //error
			}
		}
	}
	else{
		if(this->m_size_rx < RX_SIZE){
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000da0:	2b7f      	cmp	r3, #127	; 0x7f
 8000da2:	d80c      	bhi.n	8000dbe <_ZN6UART_t14AddReceiveDataEh+0x96>
			this->m_rx[m_size_rx++] = dt;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000da8:	1c5a      	adds	r2, r3, #1
 8000daa:	b291      	uxth	r1, r2
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	84d1      	strh	r1, [r2, #38]	; 0x26
 8000db0:	461a      	mov	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	78fa      	ldrb	r2, [r7, #3]
 8000db8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			this->m_status_rx = STATUS_RX_FULL_RX_BUF_EMPTY;
			this->m_size_rx = 0;
			this->m_rx_reserve[this->m_size_rx++] = dt;
		}
	}
}
 8000dbc:	e014      	b.n	8000de8 <_ZN6UART_t14AddReceiveDataEh+0xc0>
			this->m_status_rx = STATUS_RX_FULL_RX_BUF_EMPTY;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
			this->m_size_rx = 0;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	84da      	strh	r2, [r3, #38]	; 0x26
			this->m_rx_reserve[this->m_size_rx++] = dt;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000dd0:	1c5a      	adds	r2, r3, #1
 8000dd2:	b291      	uxth	r1, r2
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8000dd8:	461a      	mov	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	78fa      	ldrb	r2, [r7, #3]
 8000de0:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
}
 8000de4:	e000      	b.n	8000de8 <_ZN6UART_t14AddReceiveDataEh+0xc0>
		if(this->m_size_rx < RX_SIZE){
 8000de6:	bf00      	nop
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <_ZN6UART_t9SendBufTxEt>:

void UART_t::SendBufTx(uint16_t sz)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	807b      	strh	r3, [r7, #2]
	uint16_t ind = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	81fb      	strh	r3, [r7, #14]

	if(sz > TX_SIZE)
 8000e04:	887b      	ldrh	r3, [r7, #2]
 8000e06:	2b80      	cmp	r3, #128	; 0x80
 8000e08:	d81f      	bhi.n	8000e4a <_ZN6UART_t9SendBufTxEt+0x56>
		return;

	while(ind < sz){
 8000e0a:	89fa      	ldrh	r2, [r7, #14]
 8000e0c:	887b      	ldrh	r3, [r7, #2]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d21c      	bcs.n	8000e4c <_ZN6UART_t9SendBufTxEt+0x58>
		while (!LL_USART_IsActiveFlag_TXE(this->m_UART)) {}
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fdc8 	bl	80009ac <LL_USART_IsActiveFlag_TXE>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	bf0c      	ite	eq
 8000e22:	2301      	moveq	r3, #1
 8000e24:	2300      	movne	r3, #0
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d000      	beq.n	8000e2e <_ZN6UART_t9SendBufTxEt+0x3a>
 8000e2c:	e7f1      	b.n	8000e12 <_ZN6UART_t9SendBufTxEt+0x1e>
		LL_USART_TransmitData8(this->m_UART,this->m_tx[ind]);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6858      	ldr	r0, [r3, #4]
 8000e32:	89fb      	ldrh	r3, [r7, #14]
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	4413      	add	r3, r2
 8000e38:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f7ff fdf0 	bl	8000a22 <LL_USART_TransmitData8>
		ind++;
 8000e42:	89fb      	ldrh	r3, [r7, #14]
 8000e44:	3301      	adds	r3, #1
 8000e46:	81fb      	strh	r3, [r7, #14]
	while(ind < sz){
 8000e48:	e7df      	b.n	8000e0a <_ZN6UART_t9SendBufTxEt+0x16>
		return;
 8000e4a:	bf00      	nop
	}
}
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <_ZN6UART_t10CopyDataTxEPht>:
		this->m_status_rx = STATUS_RX_EMPTY;
	}
}

void UART_t::CopyDataTx(uint8_t *dt, uint16_t sz)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b087      	sub	sp, #28
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	60f8      	str	r0, [r7, #12]
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	80fb      	strh	r3, [r7, #6]
	uint16_t ind = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	82fb      	strh	r3, [r7, #22]

	if(sz > TX_SIZE)
 8000e64:	88fb      	ldrh	r3, [r7, #6]
 8000e66:	2b80      	cmp	r3, #128	; 0x80
 8000e68:	d816      	bhi.n	8000e98 <_ZN6UART_t10CopyDataTxEPht+0x46>
		return;

	while(ind < sz){
 8000e6a:	8afa      	ldrh	r2, [r7, #22]
 8000e6c:	88fb      	ldrh	r3, [r7, #6]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d20d      	bcs.n	8000e8e <_ZN6UART_t10CopyDataTxEPht+0x3c>
		this->m_tx[ind] = *(uint8_t*)(dt+ind);
 8000e72:	8afb      	ldrh	r3, [r7, #22]
 8000e74:	68ba      	ldr	r2, [r7, #8]
 8000e76:	441a      	add	r2, r3
 8000e78:	8afb      	ldrh	r3, [r7, #22]
 8000e7a:	7811      	ldrb	r1, [r2, #0]
 8000e7c:	68fa      	ldr	r2, [r7, #12]
 8000e7e:	4413      	add	r3, r2
 8000e80:	460a      	mov	r2, r1
 8000e82:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
		ind++;
 8000e86:	8afb      	ldrh	r3, [r7, #22]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	82fb      	strh	r3, [r7, #22]
	while(ind < sz){
 8000e8c:	e7ed      	b.n	8000e6a <_ZN6UART_t10CopyDataTxEPht+0x18>
	}

	this->m_size_tx = sz;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	88fa      	ldrh	r2, [r7, #6]
 8000e92:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
 8000e96:	e000      	b.n	8000e9a <_ZN6UART_t10CopyDataTxEPht+0x48>
		return;
 8000e98:	bf00      	nop
}
 8000e9a:	371c      	adds	r7, #28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <_ZN6UART_t5OnIRQE9IRQn_Type>:


void UART_t::OnIRQ(IRQn_Type irq)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	70fb      	strb	r3, [r7, #3]
	NVIC_SetPriority(irq, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000eb0:	f7ff fc9e 	bl	80007f0 <__NVIC_GetPriorityGrouping>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fcee 	bl	800089c <NVIC_EncodePriority>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fcbd 	bl	8000848 <__NVIC_SetPriority>
	NVIC_EnableIRQ(irq);
 8000ece:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fc9a 	bl	800080c <__NVIC_EnableIRQ>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <LL_AHB1_GRP1_EnableClock>:
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000eea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000eec:	4907      	ldr	r1, [pc, #28]	; (8000f0c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ef6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4013      	ands	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000efe:	68fb      	ldr	r3, [r7, #12]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	40023800 	.word	0x40023800

08000f10 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	691a      	ldr	r2, [r3, #16]
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	4013      	ands	r3, r2
 8000f22:	683a      	ldr	r2, [r7, #0]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	bf0c      	ite	eq
 8000f28:	2301      	moveq	r3, #1
 8000f2a:	2300      	movne	r3, #0
 8000f2c:	b2db      	uxtb	r3, r3
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	683a      	ldr	r2, [r7, #0]
 8000f48:	619a      	str	r2, [r3, #24]
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	041a      	lsls	r2, r3, #16
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	619a      	str	r2, [r3, #24]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <_ZN6UART_tC1Ev>:

class UART_t
{

public:
	UART_t() {};
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	84da      	strh	r2, [r3, #38]	; 0x26
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <_ZN6UART_tD1Ev>:
	~UART_t() {};
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <_ZN6UART_t7SetUARTEP13USART_TypeDef>:

	void SetUART(USART_TypeDef *uart) {MACRO_CREATE_SET_AND_UP_FLAG(m_UART,uart,UART_SET_UART)};
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	6039      	str	r1, [r7, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	683a      	ldr	r2, [r7, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	; 0x1ac
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <_ZN6UART_t11SetBaudRateEm>:
	void SetBaudRate(uint32_t baudrate) {MACRO_CREATE_SET_AND_UP_FLAG(m_BaudRate,baudrate,UART_SET_BAUDRATE)};
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	; 0x1ac
 8001002:	f043 0302 	orr.w	r3, r3, #2
 8001006:	b29a      	uxth	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <_ZN6UART_t12SetDataWidthEm>:
	void SetDataWidth(uint32_t datawidth) {MACRO_CREATE_SET_AND_UP_FLAG(m_DataWidth,datawidth,UART_SET_DATAWIDTH)};
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
 8001022:	6039      	str	r1, [r7, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	; 0x1ac
 8001030:	f043 0304 	orr.w	r3, r3, #4
 8001034:	b29a      	uxth	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <_ZN6UART_t11SetStopBitsEm>:
	void SetStopBits(uint32_t stopbits) {MACRO_CREATE_SET_AND_UP_FLAG(m_StopBits,stopbits,UART_SET_STOPBITS)};
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	683a      	ldr	r2, [r7, #0]
 8001056:	611a      	str	r2, [r3, #16]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	; 0x1ac
 800105e:	f043 0308 	orr.w	r3, r3, #8
 8001062:	b29a      	uxth	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <_ZN6UART_t9SetParityEm>:
	void SetParity(uint32_t parity) {MACRO_CREATE_SET_AND_UP_FLAG(m_Parity,parity,UART_SET_PARITY)};
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	6039      	str	r1, [r7, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	683a      	ldr	r2, [r7, #0]
 8001084:	615a      	str	r2, [r3, #20]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	; 0x1ac
 800108c:	f043 0310 	orr.w	r3, r3, #16
 8001090:	b29a      	uxth	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <_ZN6UART_t20SetTransferDirectionEm>:
	void SetTransferDirection(uint32_t transferdirection) {MACRO_CREATE_SET_AND_UP_FLAG(m_TransferDirection,transferdirection,UART_SET_TRANSFERDIRECTION)};
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	619a      	str	r2, [r3, #24]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	; 0x1ac
 80010ba:	f043 0320 	orr.w	r3, r3, #32
 80010be:	b29a      	uxth	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <_ZN6UART_t22SetHardwareFlowControlEm>:
	void SetHardwareFlowControl(uint32_t hardwareflowcontrol) {MACRO_CREATE_SET_AND_UP_FLAG(m_HardwareFlowControl,hardwareflowcontrol,UART_SET_HARDWAREFLOWCONTROL)};
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	6039      	str	r1, [r7, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	61da      	str	r2, [r3, #28]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	; 0x1ac
 80010e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <_ZN6UART_t15SetOverSamplingEm>:
	void SetOverSampling(uint32_t oversampling) {MACRO_CREATE_SET_AND_UP_FLAG(m_OverSampling,oversampling,UART_SET_OVERSEMPLING)};
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	621a      	str	r2, [r3, #32]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	; 0x1ac
 8001116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800111a:	b29a      	uxth	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <_ZN6UART_t6SetIRQE9IRQn_Type>:
	void SetIRQ(IRQn_Type irq) {MACRO_CREATE_SET_AND_UP_FLAG(m_Irq,irq,UART_SET_IRQ)};
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	460b      	mov	r3, r1
 8001138:	70fb      	strb	r3, [r7, #3]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	78fa      	ldrb	r2, [r7, #3]
 800113e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	; 0x1ac
 8001148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114c:	b29a      	uxth	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <_ZN6UART_t15SetCallBackFuncEPFvvE>:

	void SetCallBackFunc(void (*func)()) {this->callBackFunc = func;};
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <_ZN6UART_t16CreateSendPacketEhh>:
	void OnIRQ(IRQn_Type irq);
	void OffIRQ(IRQn_Type irq);

	void AddReceiveData(uint8_t dt);

	void CreateSendPacket(uint8_t dt, uint8_t ind)	{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	70fb      	strb	r3, [r7, #3]
 8001188:	4613      	mov	r3, r2
 800118a:	70bb      	strb	r3, [r7, #2]
		this->m_tx[ind] = dt;
 800118c:	78bb      	ldrb	r3, [r7, #2]
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	78fa      	ldrb	r2, [r7, #3]
 8001194:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
	};
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <_ZN6UART_t8StatusRxEv>:

	void SendBufRx();

	void CopyDataTx(uint8_t *dt, uint16_t sz);

	Status_rx_t StatusRx(){
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
		return this->m_status_rx;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
	}
 80011b2:	4618      	mov	r0, r3
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <_ZN6UART_t7ClearRxEv>:

	void ClearRx(){
 80011be:	b480      	push	{r7}
 80011c0:	b085      	sub	sp, #20
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
		uint16_t ind = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	81fb      	strh	r3, [r7, #14]
		while(ind < RX_SIZE)
 80011ca:	89fb      	ldrh	r3, [r7, #14]
 80011cc:	2b7f      	cmp	r3, #127	; 0x7f
 80011ce:	d809      	bhi.n	80011e4 <_ZN6UART_t7ClearRxEv+0x26>
			this->m_rx[ind++] = 0;
 80011d0:	89fb      	ldrh	r3, [r7, #14]
 80011d2:	1c5a      	adds	r2, r3, #1
 80011d4:	81fa      	strh	r2, [r7, #14]
 80011d6:	461a      	mov	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4413      	add	r3, r2
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		while(ind < RX_SIZE)
 80011e2:	e7f2      	b.n	80011ca <_ZN6UART_t7ClearRxEv+0xc>
		if(this->m_status_rx == STATUS_RX_FULL_RX_BUF_EMPTY)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d103      	bne.n	80011f6 <_ZN6UART_t7ClearRxEv+0x38>
			this->m_status_rx = STATUS_RX_EMPTY_RX_BUF_ANY;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2202      	movs	r2, #2
 80011f2:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
	};
 80011f6:	bf00      	nop
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <_ZN6UART_t14ClearRxReserveEv>:

	void ClearRxReserve(){
 8001202:	b480      	push	{r7}
 8001204:	b085      	sub	sp, #20
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
		uint16_t ind = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	81fb      	strh	r3, [r7, #14]
		while(ind < RX_SIZE)
 800120e:	89fb      	ldrh	r3, [r7, #14]
 8001210:	2b7f      	cmp	r3, #127	; 0x7f
 8001212:	d809      	bhi.n	8001228 <_ZN6UART_t14ClearRxReserveEv+0x26>
			this->m_rx_reserve[ind++] = 0;
 8001214:	89fb      	ldrh	r3, [r7, #14]
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	81fa      	strh	r2, [r7, #14]
 800121a:	461a      	mov	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4413      	add	r3, r2
 8001220:	2200      	movs	r2, #0
 8001222:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		while(ind < RX_SIZE)
 8001226:	e7f2      	b.n	800120e <_ZN6UART_t14ClearRxReserveEv+0xc>
		if(this->m_status_rx == STATUS_RX_EMPTY_RX_BUF_FULL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 800122e:	2b03      	cmp	r3, #3
 8001230:	d103      	bne.n	800123a <_ZN6UART_t14ClearRxReserveEv+0x38>
			this->m_status_rx = STATUS_RX_EMPTY;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
	};
 800123a:	bf00      	nop
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <_ZN6UART_t5AdrRxEv>:

	uint8_t* AdrRx() {
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
		switch(this->m_status_rx){
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8001256:	2b03      	cmp	r3, #3
 8001258:	d816      	bhi.n	8001288 <_ZN6UART_t5AdrRxEv+0x40>
 800125a:	a201      	add	r2, pc, #4	; (adr r2, 8001260 <_ZN6UART_t5AdrRxEv+0x18>)
 800125c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001260:	08001271 	.word	0x08001271
 8001264:	08001277 	.word	0x08001277
 8001268:	0800127d 	.word	0x0800127d
 800126c:	08001283 	.word	0x08001283
		case STATUS_RX_EMPTY:
			return &this->m_rx[0];
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3328      	adds	r3, #40	; 0x28
 8001274:	e00a      	b.n	800128c <_ZN6UART_t5AdrRxEv+0x44>
			break;
		case STATUS_RX_FULL_RX_BUF_EMPTY:
			return &this->m_rx[0];
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3328      	adds	r3, #40	; 0x28
 800127a:	e007      	b.n	800128c <_ZN6UART_t5AdrRxEv+0x44>
			break;
		case STATUS_RX_EMPTY_RX_BUF_ANY:
			return &this->m_rx_reserve[0];
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	33a8      	adds	r3, #168	; 0xa8
 8001280:	e004      	b.n	800128c <_ZN6UART_t5AdrRxEv+0x44>
			break;
		case STATUS_RX_EMPTY_RX_BUF_FULL:
			return &this->m_rx_reserve[0];
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	33a8      	adds	r3, #168	; 0xa8
 8001286:	e001      	b.n	800128c <_ZN6UART_t5AdrRxEv+0x44>
			break;
		}

		return &this->m_rx[0];
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3328      	adds	r3, #40	; 0x28
	};
 800128c:	4618      	mov	r0, r3
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <_ZN6GPIO_tC1Ev>:

class GPIO_t
{

public:
	GPIO_t() {};
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	839a      	strh	r2, [r3, #28]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4618      	mov	r0, r3
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <_ZN6GPIO_tD1Ev>:
	~GPIO_t() {};
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4618      	mov	r0, r3
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <_ZN6GPIO_t7SetGPIOEP12GPIO_TypeDef>:

	void SetGPIO(GPIO_TypeDef *gpio) {MACRO_CREATE_SET_AND_UP_FLAG(m_GPIO,gpio,GPIO_SET_GPIO)};
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	6039      	str	r1, [r7, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	683a      	ldr	r2, [r7, #0]
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	8b9b      	ldrh	r3, [r3, #28]
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	839a      	strh	r2, [r3, #28]
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <_ZN6GPIO_t6SetPinEm>:
	void SetPin(uint32_t pin) {MACRO_CREATE_SET_AND_UP_FLAG(m_Pin,pin,GPIO_SET_PIN)};
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	8b9b      	ldrh	r3, [r3, #28]
 8001308:	f043 0302 	orr.w	r3, r3, #2
 800130c:	b29a      	uxth	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	839a      	strh	r2, [r3, #28]
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <_ZN6GPIO_t7SetModeEm>:
	void SetMode(uint32_t mode) {MACRO_CREATE_SET_AND_UP_FLAG(m_Mode,mode,GPIO_SET_MODE)};
 800131e:	b480      	push	{r7}
 8001320:	b083      	sub	sp, #12
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	6039      	str	r1, [r7, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	8b9b      	ldrh	r3, [r3, #28]
 8001332:	f043 0304 	orr.w	r3, r3, #4
 8001336:	b29a      	uxth	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	839a      	strh	r2, [r3, #28]
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <_ZN6GPIO_t8SetSpeedEm>:
	void SetSpeed(uint32_t speed) {MACRO_CREATE_SET_AND_UP_FLAG(m_Speed,speed,GPIO_SET_SPEED)};
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	8b9b      	ldrh	r3, [r3, #28]
 800135c:	f043 0308 	orr.w	r3, r3, #8
 8001360:	b29a      	uxth	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	839a      	strh	r2, [r3, #28]
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <_ZN6GPIO_t13SetOutputTypeEm>:
	void SetOutputType(uint32_t outputtype) {MACRO_CREATE_SET_AND_UP_FLAG(m_OutputType,outputtype,GPIO_SET_OUTPUTTYPE)};
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	6039      	str	r1, [r7, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	611a      	str	r2, [r3, #16]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	8b9b      	ldrh	r3, [r3, #28]
 8001386:	f043 0310 	orr.w	r3, r3, #16
 800138a:	b29a      	uxth	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	839a      	strh	r2, [r3, #28]
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <_ZN6GPIO_t7SetPullEm>:
	void SetPull(uint32_t pull) {MACRO_CREATE_SET_AND_UP_FLAG(m_Pull,pull,GPIO_SET_PULL)};
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	615a      	str	r2, [r3, #20]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	8b9b      	ldrh	r3, [r3, #28]
 80013b0:	f043 0320 	orr.w	r3, r3, #32
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	839a      	strh	r2, [r3, #28]
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <_ZN6GPIO_t12SetAlternateEm>:
	void SetAlternate(uint32_t alternate) {MACRO_CREATE_SET_AND_UP_FLAG(m_Alternate,alternate,GPIO_SET_ALTERNATE)};
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	6039      	str	r1, [r7, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	619a      	str	r2, [r3, #24]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	8b9b      	ldrh	r3, [r3, #28]
 80013da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013de:	b29a      	uxth	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	839a      	strh	r2, [r3, #28]
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <_ZN6GPIO_t4ReadEv>:
	void Init();
	void Init(GPIO_TypeDef *gpio,uint32_t pin,uint32_t mode,uint32_t speed,uint32_t outputtype,uint32_t pull,uint32_t alternate);

	void InitInput(GPIO_TypeDef *gpio,uint32_t pin,uint32_t mode,uint32_t pull);

	bool Read() {return (bool)LL_GPIO_IsInputPinSet(this->m_GPIO, this->m_Pin);};
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	4619      	mov	r1, r3
 8001402:	4610      	mov	r0, r2
 8001404:	f7ff fd84 	bl	8000f10 <LL_GPIO_IsInputPinSet>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	bf14      	ite	ne
 800140e:	2301      	movne	r3, #1
 8001410:	2300      	moveq	r3, #0
 8001412:	b2db      	uxtb	r3, r3
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <_ZN6GPIO_t11EnableClockEm>:

	void EnableClock(uint32_t channel) {LL_AHB1_GRP1_EnableClock(channel);};
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
 8001426:	6838      	ldr	r0, [r7, #0]
 8001428:	f7ff fd5a 	bl	8000ee0 <LL_AHB1_GRP1_EnableClock>
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <alt_main>:
GPIO_t cust_GPIO_RX_UART5;
GPIO_t cust_GPIO_TX_UART5;
#endif

int alt_main()
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
	/* Initialization */
#ifdef __cplusplus
	Ini_GPIO();
 800143a:	f000 f8b5 	bl	80015a8 <Ini_GPIO>
	Ini_UART();
 800143e:	f000 f987 	bl	8001750 <Ini_UART>

	for(uint16_t i=0; i<64; i++){
 8001442:	2300      	movs	r3, #0
 8001444:	80fb      	strh	r3, [r7, #6]
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	2b3f      	cmp	r3, #63	; 0x3f
 800144a:	d80b      	bhi.n	8001464 <alt_main+0x30>
		cust_USART3.CreateSendPacket(i, i);
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	88fa      	ldrh	r2, [r7, #6]
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	4619      	mov	r1, r3
 8001456:	482b      	ldr	r0, [pc, #172]	; (8001504 <alt_main+0xd0>)
 8001458:	f7ff fe90 	bl	800117c <_ZN6UART_t16CreateSendPacketEhh>
	for(uint16_t i=0; i<64; i++){
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	3301      	adds	r3, #1
 8001460:	80fb      	strh	r3, [r7, #6]
 8001462:	e7f0      	b.n	8001446 <alt_main+0x12>
	}

	while (1)
	{
		if(cust_GPIO_Bt_User.Read()){ //pushbutton
 8001464:	4828      	ldr	r0, [pc, #160]	; (8001508 <alt_main+0xd4>)
 8001466:	f7ff ffc3 	bl	80013f0 <_ZN6GPIO_t4ReadEv>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d00f      	beq.n	8001490 <alt_main+0x5c>
			cust_USART3.SendBufTx(64);
 8001470:	2140      	movs	r1, #64	; 0x40
 8001472:	4824      	ldr	r0, [pc, #144]	; (8001504 <alt_main+0xd0>)
 8001474:	f7ff fcbe 	bl	8000df4 <_ZN6UART_t9SendBufTxEt>
			LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_12); //Led
 8001478:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800147c:	4823      	ldr	r0, [pc, #140]	; (800150c <alt_main+0xd8>)
 800147e:	f7ff fd5c 	bl	8000f3a <LL_GPIO_SetOutputPin>
			while (cust_GPIO_Bt_User.Read()) {}
 8001482:	4821      	ldr	r0, [pc, #132]	; (8001508 <alt_main+0xd4>)
 8001484:	f7ff ffb4 	bl	80013f0 <_ZN6GPIO_t4ReadEv>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d005      	beq.n	800149a <alt_main+0x66>
 800148e:	e7f8      	b.n	8001482 <alt_main+0x4e>
		}
		else
			LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_12); //Led
 8001490:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001494:	481d      	ldr	r0, [pc, #116]	; (800150c <alt_main+0xd8>)
 8001496:	f7ff fd5e 	bl	8000f56 <LL_GPIO_ResetOutputPin>

		switch(cust_USART1.StatusRx()){
 800149a:	481d      	ldr	r0, [pc, #116]	; (8001510 <alt_main+0xdc>)
 800149c:	f7ff fe82 	bl	80011a4 <_ZN6UART_t8StatusRxEv>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b03      	cmp	r3, #3
 80014a4:	d8de      	bhi.n	8001464 <alt_main+0x30>
 80014a6:	a201      	add	r2, pc, #4	; (adr r2, 80014ac <alt_main+0x78>)
 80014a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ac:	08001465 	.word	0x08001465
 80014b0:	080014bd 	.word	0x080014bd
 80014b4:	08001465 	.word	0x08001465
 80014b8:	080014df 	.word	0x080014df
		case STATUS_RX_EMPTY:
			break;
		case STATUS_RX_FULL_RX_BUF_EMPTY:
			cust_USART2.CopyDataTx(cust_USART1.AdrRx(), TX_SIZE);
 80014bc:	4814      	ldr	r0, [pc, #80]	; (8001510 <alt_main+0xdc>)
 80014be:	f7ff fec3 	bl	8001248 <_ZN6UART_t5AdrRxEv>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2280      	movs	r2, #128	; 0x80
 80014c6:	4619      	mov	r1, r3
 80014c8:	4812      	ldr	r0, [pc, #72]	; (8001514 <alt_main+0xe0>)
 80014ca:	f7ff fcc2 	bl	8000e52 <_ZN6UART_t10CopyDataTxEPht>
			cust_USART1.ClearRx();
 80014ce:	4810      	ldr	r0, [pc, #64]	; (8001510 <alt_main+0xdc>)
 80014d0:	f7ff fe75 	bl	80011be <_ZN6UART_t7ClearRxEv>
			cust_USART2.SendBufTx(TX_SIZE);
 80014d4:	2180      	movs	r1, #128	; 0x80
 80014d6:	480f      	ldr	r0, [pc, #60]	; (8001514 <alt_main+0xe0>)
 80014d8:	f7ff fc8c 	bl	8000df4 <_ZN6UART_t9SendBufTxEt>
			break;
 80014dc:	e010      	b.n	8001500 <alt_main+0xcc>
		case STATUS_RX_EMPTY_RX_BUF_ANY:
			break;
		case STATUS_RX_EMPTY_RX_BUF_FULL:
			cust_USART2.CopyDataTx(cust_USART1.AdrRx(), TX_SIZE);
 80014de:	480c      	ldr	r0, [pc, #48]	; (8001510 <alt_main+0xdc>)
 80014e0:	f7ff feb2 	bl	8001248 <_ZN6UART_t5AdrRxEv>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2280      	movs	r2, #128	; 0x80
 80014e8:	4619      	mov	r1, r3
 80014ea:	480a      	ldr	r0, [pc, #40]	; (8001514 <alt_main+0xe0>)
 80014ec:	f7ff fcb1 	bl	8000e52 <_ZN6UART_t10CopyDataTxEPht>
			cust_USART1.ClearRxReserve();
 80014f0:	4807      	ldr	r0, [pc, #28]	; (8001510 <alt_main+0xdc>)
 80014f2:	f7ff fe86 	bl	8001202 <_ZN6UART_t14ClearRxReserveEv>
			cust_USART2.SendBufTx(TX_SIZE);
 80014f6:	2180      	movs	r1, #128	; 0x80
 80014f8:	4806      	ldr	r0, [pc, #24]	; (8001514 <alt_main+0xe0>)
 80014fa:	f7ff fc7b 	bl	8000df4 <_ZN6UART_t9SendBufTxEt>
			break;
 80014fe:	bf00      	nop
		if(cust_GPIO_Bt_User.Read()){ //pushbutton
 8001500:	e7b0      	b.n	8001464 <alt_main+0x30>
 8001502:	bf00      	nop
 8001504:	20000420 	.word	0x20000420
 8001508:	20000020 	.word	0x20000020
 800150c:	40020c00 	.word	0x40020c00
 8001510:	20000040 	.word	0x20000040
 8001514:	20000230 	.word	0x20000230

08001518 <alt_UART_IRQ>:
		/* Super loop */
	}
#endif
}

void alt_UART_IRQ(USART_TypeDef *uart){
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
#ifdef __cplusplus
	if(uart == USART1){
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a19      	ldr	r2, [pc, #100]	; (8001588 <alt_UART_IRQ+0x70>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d107      	bne.n	8001538 <alt_UART_IRQ+0x20>
		if(cust_USART1.callBackFunc)
 8001528:	4b18      	ldr	r3, [pc, #96]	; (800158c <alt_UART_IRQ+0x74>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d026      	beq.n	800157e <alt_UART_IRQ+0x66>
			cust_USART1.callBackFunc();
 8001530:	4b16      	ldr	r3, [pc, #88]	; (800158c <alt_UART_IRQ+0x74>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4798      	blx	r3
	else if(uart == UART5){
		if(cust_UART5.callBackFunc)
			cust_UART5.callBackFunc();
	}
#endif
}
 8001536:	e022      	b.n	800157e <alt_UART_IRQ+0x66>
	else if(uart == USART2){
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a15      	ldr	r2, [pc, #84]	; (8001590 <alt_UART_IRQ+0x78>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d107      	bne.n	8001550 <alt_UART_IRQ+0x38>
		if(cust_USART2.callBackFunc)
 8001540:	4b14      	ldr	r3, [pc, #80]	; (8001594 <alt_UART_IRQ+0x7c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d01a      	beq.n	800157e <alt_UART_IRQ+0x66>
			cust_USART2.callBackFunc();
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <alt_UART_IRQ+0x7c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4798      	blx	r3
}
 800154e:	e016      	b.n	800157e <alt_UART_IRQ+0x66>
	else if(uart == USART3){
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a11      	ldr	r2, [pc, #68]	; (8001598 <alt_UART_IRQ+0x80>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d107      	bne.n	8001568 <alt_UART_IRQ+0x50>
		if(cust_USART3.callBackFunc)
 8001558:	4b10      	ldr	r3, [pc, #64]	; (800159c <alt_UART_IRQ+0x84>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00e      	beq.n	800157e <alt_UART_IRQ+0x66>
			cust_USART3.callBackFunc();
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <alt_UART_IRQ+0x84>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4798      	blx	r3
}
 8001566:	e00a      	b.n	800157e <alt_UART_IRQ+0x66>
	else if(uart == UART5){
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a0d      	ldr	r2, [pc, #52]	; (80015a0 <alt_UART_IRQ+0x88>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d106      	bne.n	800157e <alt_UART_IRQ+0x66>
		if(cust_UART5.callBackFunc)
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <alt_UART_IRQ+0x8c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d002      	beq.n	800157e <alt_UART_IRQ+0x66>
			cust_UART5.callBackFunc();
 8001578:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <alt_UART_IRQ+0x8c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4798      	blx	r3
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40011000 	.word	0x40011000
 800158c:	20000040 	.word	0x20000040
 8001590:	40004400 	.word	0x40004400
 8001594:	20000230 	.word	0x20000230
 8001598:	40004800 	.word	0x40004800
 800159c:	20000420 	.word	0x20000420
 80015a0:	40005000 	.word	0x40005000
 80015a4:	20000610 	.word	0x20000610

080015a8 <Ini_GPIO>:

#ifdef __cplusplus

void Ini_GPIO(){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af04      	add	r7, sp, #16

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80015ae:	2001      	movs	r0, #1
 80015b0:	f7ff fc96 	bl	8000ee0 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80015b4:	2002      	movs	r0, #2
 80015b6:	f7ff fc93 	bl	8000ee0 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80015ba:	2008      	movs	r0, #8
 80015bc:	f7ff fc90 	bl	8000ee0 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80015c0:	2004      	movs	r0, #4
 80015c2:	f7ff fc8d 	bl	8000ee0 <LL_AHB1_GRP1_EnableClock>

	cust_GPIO_Bt_User.InitInput(GPIOA,LL_GPIO_PIN_0,LL_GPIO_MODE_INPUT,LL_GPIO_PULL_NO);
 80015c6:	2300      	movs	r3, #0
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	2300      	movs	r3, #0
 80015cc:	2201      	movs	r2, #1
 80015ce:	4953      	ldr	r1, [pc, #332]	; (800171c <Ini_GPIO+0x174>)
 80015d0:	4853      	ldr	r0, [pc, #332]	; (8001720 <Ini_GPIO+0x178>)
 80015d2:	f7ff f887 	bl	80006e4 <_ZN6GPIO_t9InitInputEP12GPIO_TypeDefmmm>

	cust_GPIO_RX_USART1.EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80015d6:	2101      	movs	r1, #1
 80015d8:	4852      	ldr	r0, [pc, #328]	; (8001724 <Ini_GPIO+0x17c>)
 80015da:	f7ff ff1f 	bl	800141c <_ZN6GPIO_t11EnableClockEm>

	cust_GPIO_RX_USART1.SetGPIO(GPIOA);
 80015de:	494f      	ldr	r1, [pc, #316]	; (800171c <Ini_GPIO+0x174>)
 80015e0:	4850      	ldr	r0, [pc, #320]	; (8001724 <Ini_GPIO+0x17c>)
 80015e2:	f7ff fe72 	bl	80012ca <_ZN6GPIO_t7SetGPIOEP12GPIO_TypeDef>
	cust_GPIO_RX_USART1.SetPin(LL_GPIO_PIN_10);
 80015e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ea:	484e      	ldr	r0, [pc, #312]	; (8001724 <Ini_GPIO+0x17c>)
 80015ec:	f7ff fe82 	bl	80012f4 <_ZN6GPIO_t6SetPinEm>
	cust_GPIO_RX_USART1.SetMode(LL_GPIO_MODE_ALTERNATE);
 80015f0:	2102      	movs	r1, #2
 80015f2:	484c      	ldr	r0, [pc, #304]	; (8001724 <Ini_GPIO+0x17c>)
 80015f4:	f7ff fe93 	bl	800131e <_ZN6GPIO_t7SetModeEm>
	cust_GPIO_RX_USART1.SetSpeed(LL_GPIO_SPEED_FREQ_VERY_HIGH);
 80015f8:	2103      	movs	r1, #3
 80015fa:	484a      	ldr	r0, [pc, #296]	; (8001724 <Ini_GPIO+0x17c>)
 80015fc:	f7ff fea4 	bl	8001348 <_ZN6GPIO_t8SetSpeedEm>
	cust_GPIO_RX_USART1.SetOutputType(LL_GPIO_OUTPUT_PUSHPULL);
 8001600:	2100      	movs	r1, #0
 8001602:	4848      	ldr	r0, [pc, #288]	; (8001724 <Ini_GPIO+0x17c>)
 8001604:	f7ff feb5 	bl	8001372 <_ZN6GPIO_t13SetOutputTypeEm>
	cust_GPIO_RX_USART1.SetPull(LL_GPIO_PULL_NO);
 8001608:	2100      	movs	r1, #0
 800160a:	4846      	ldr	r0, [pc, #280]	; (8001724 <Ini_GPIO+0x17c>)
 800160c:	f7ff fec6 	bl	800139c <_ZN6GPIO_t7SetPullEm>
	cust_GPIO_RX_USART1.SetAlternate(LL_GPIO_AF_7);
 8001610:	2107      	movs	r1, #7
 8001612:	4844      	ldr	r0, [pc, #272]	; (8001724 <Ini_GPIO+0x17c>)
 8001614:	f7ff fed7 	bl	80013c6 <_ZN6GPIO_t12SetAlternateEm>

	cust_GPIO_RX_USART1.Init();
 8001618:	4842      	ldr	r0, [pc, #264]	; (8001724 <Ini_GPIO+0x17c>)
 800161a:	f7fe ff6f 	bl	80004fc <_ZN6GPIO_t4InitEv>

	cust_GPIO_TX_USART1.EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800161e:	2101      	movs	r1, #1
 8001620:	4841      	ldr	r0, [pc, #260]	; (8001728 <Ini_GPIO+0x180>)
 8001622:	f7ff fefb 	bl	800141c <_ZN6GPIO_t11EnableClockEm>

	cust_GPIO_TX_USART1.SetGPIO(GPIOA);
 8001626:	493d      	ldr	r1, [pc, #244]	; (800171c <Ini_GPIO+0x174>)
 8001628:	483f      	ldr	r0, [pc, #252]	; (8001728 <Ini_GPIO+0x180>)
 800162a:	f7ff fe4e 	bl	80012ca <_ZN6GPIO_t7SetGPIOEP12GPIO_TypeDef>
	cust_GPIO_TX_USART1.SetPin(LL_GPIO_PIN_9);
 800162e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001632:	483d      	ldr	r0, [pc, #244]	; (8001728 <Ini_GPIO+0x180>)
 8001634:	f7ff fe5e 	bl	80012f4 <_ZN6GPIO_t6SetPinEm>
	cust_GPIO_TX_USART1.SetMode(LL_GPIO_MODE_ALTERNATE);
 8001638:	2102      	movs	r1, #2
 800163a:	483b      	ldr	r0, [pc, #236]	; (8001728 <Ini_GPIO+0x180>)
 800163c:	f7ff fe6f 	bl	800131e <_ZN6GPIO_t7SetModeEm>
	cust_GPIO_TX_USART1.SetSpeed(LL_GPIO_SPEED_FREQ_VERY_HIGH);
 8001640:	2103      	movs	r1, #3
 8001642:	4839      	ldr	r0, [pc, #228]	; (8001728 <Ini_GPIO+0x180>)
 8001644:	f7ff fe80 	bl	8001348 <_ZN6GPIO_t8SetSpeedEm>
	cust_GPIO_TX_USART1.SetOutputType(LL_GPIO_OUTPUT_PUSHPULL);
 8001648:	2100      	movs	r1, #0
 800164a:	4837      	ldr	r0, [pc, #220]	; (8001728 <Ini_GPIO+0x180>)
 800164c:	f7ff fe91 	bl	8001372 <_ZN6GPIO_t13SetOutputTypeEm>
	cust_GPIO_TX_USART1.SetPull(LL_GPIO_PULL_NO);
 8001650:	2100      	movs	r1, #0
 8001652:	4835      	ldr	r0, [pc, #212]	; (8001728 <Ini_GPIO+0x180>)
 8001654:	f7ff fea2 	bl	800139c <_ZN6GPIO_t7SetPullEm>
	cust_GPIO_TX_USART1.SetAlternate(LL_GPIO_AF_7);
 8001658:	2107      	movs	r1, #7
 800165a:	4833      	ldr	r0, [pc, #204]	; (8001728 <Ini_GPIO+0x180>)
 800165c:	f7ff feb3 	bl	80013c6 <_ZN6GPIO_t12SetAlternateEm>

	cust_GPIO_TX_USART1.Init();
 8001660:	4831      	ldr	r0, [pc, #196]	; (8001728 <Ini_GPIO+0x180>)
 8001662:	f7fe ff4b 	bl	80004fc <_ZN6GPIO_t4InitEv>

	cust_GPIO_RX_USART2.Init(GPIOA,LL_GPIO_PIN_3,LL_GPIO_MODE_ALTERNATE,LL_GPIO_SPEED_FREQ_VERY_HIGH,LL_GPIO_OUTPUT_PUSHPULL,LL_GPIO_PULL_NO,LL_GPIO_AF_7);
 8001666:	2307      	movs	r3, #7
 8001668:	9303      	str	r3, [sp, #12]
 800166a:	2300      	movs	r3, #0
 800166c:	9302      	str	r3, [sp, #8]
 800166e:	2300      	movs	r3, #0
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	2303      	movs	r3, #3
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	2302      	movs	r3, #2
 8001678:	2208      	movs	r2, #8
 800167a:	4928      	ldr	r1, [pc, #160]	; (800171c <Ini_GPIO+0x174>)
 800167c:	482b      	ldr	r0, [pc, #172]	; (800172c <Ini_GPIO+0x184>)
 800167e:	f7fe ffb1 	bl	80005e4 <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm>
	cust_GPIO_TX_USART2.Init(GPIOA,LL_GPIO_PIN_2,LL_GPIO_MODE_ALTERNATE,LL_GPIO_SPEED_FREQ_VERY_HIGH,LL_GPIO_OUTPUT_PUSHPULL,LL_GPIO_PULL_NO,LL_GPIO_AF_7);
 8001682:	2307      	movs	r3, #7
 8001684:	9303      	str	r3, [sp, #12]
 8001686:	2300      	movs	r3, #0
 8001688:	9302      	str	r3, [sp, #8]
 800168a:	2300      	movs	r3, #0
 800168c:	9301      	str	r3, [sp, #4]
 800168e:	2303      	movs	r3, #3
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	2302      	movs	r3, #2
 8001694:	2204      	movs	r2, #4
 8001696:	4921      	ldr	r1, [pc, #132]	; (800171c <Ini_GPIO+0x174>)
 8001698:	4825      	ldr	r0, [pc, #148]	; (8001730 <Ini_GPIO+0x188>)
 800169a:	f7fe ffa3 	bl	80005e4 <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm>

	cust_GPIO_RX_USART3.Init(GPIOB,LL_GPIO_PIN_10,LL_GPIO_MODE_ALTERNATE,LL_GPIO_SPEED_FREQ_VERY_HIGH,LL_GPIO_OUTPUT_PUSHPULL,LL_GPIO_PULL_NO,LL_GPIO_AF_7);
 800169e:	2307      	movs	r3, #7
 80016a0:	9303      	str	r3, [sp, #12]
 80016a2:	2300      	movs	r3, #0
 80016a4:	9302      	str	r3, [sp, #8]
 80016a6:	2300      	movs	r3, #0
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	2303      	movs	r3, #3
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	2302      	movs	r3, #2
 80016b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016b4:	491f      	ldr	r1, [pc, #124]	; (8001734 <Ini_GPIO+0x18c>)
 80016b6:	4820      	ldr	r0, [pc, #128]	; (8001738 <Ini_GPIO+0x190>)
 80016b8:	f7fe ff94 	bl	80005e4 <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm>
	cust_GPIO_TX_USART3.Init(GPIOB,LL_GPIO_PIN_11,LL_GPIO_MODE_ALTERNATE,LL_GPIO_SPEED_FREQ_VERY_HIGH,LL_GPIO_OUTPUT_PUSHPULL,LL_GPIO_PULL_NO,LL_GPIO_AF_7);
 80016bc:	2307      	movs	r3, #7
 80016be:	9303      	str	r3, [sp, #12]
 80016c0:	2300      	movs	r3, #0
 80016c2:	9302      	str	r3, [sp, #8]
 80016c4:	2300      	movs	r3, #0
 80016c6:	9301      	str	r3, [sp, #4]
 80016c8:	2303      	movs	r3, #3
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	2302      	movs	r3, #2
 80016ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016d2:	4918      	ldr	r1, [pc, #96]	; (8001734 <Ini_GPIO+0x18c>)
 80016d4:	4819      	ldr	r0, [pc, #100]	; (800173c <Ini_GPIO+0x194>)
 80016d6:	f7fe ff85 	bl	80005e4 <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm>

	cust_GPIO_RX_UART5.Init(GPIOD,LL_GPIO_PIN_2,LL_GPIO_MODE_ALTERNATE,LL_GPIO_SPEED_FREQ_VERY_HIGH,LL_GPIO_OUTPUT_PUSHPULL,LL_GPIO_PULL_NO,LL_GPIO_AF_8);
 80016da:	2308      	movs	r3, #8
 80016dc:	9303      	str	r3, [sp, #12]
 80016de:	2300      	movs	r3, #0
 80016e0:	9302      	str	r3, [sp, #8]
 80016e2:	2300      	movs	r3, #0
 80016e4:	9301      	str	r3, [sp, #4]
 80016e6:	2303      	movs	r3, #3
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	2302      	movs	r3, #2
 80016ec:	2204      	movs	r2, #4
 80016ee:	4914      	ldr	r1, [pc, #80]	; (8001740 <Ini_GPIO+0x198>)
 80016f0:	4814      	ldr	r0, [pc, #80]	; (8001744 <Ini_GPIO+0x19c>)
 80016f2:	f7fe ff77 	bl	80005e4 <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm>
	cust_GPIO_TX_UART5.Init(GPIOC,LL_GPIO_PIN_12,LL_GPIO_MODE_ALTERNATE,LL_GPIO_SPEED_FREQ_VERY_HIGH,LL_GPIO_OUTPUT_PUSHPULL,LL_GPIO_PULL_NO,LL_GPIO_AF_8);
 80016f6:	2308      	movs	r3, #8
 80016f8:	9303      	str	r3, [sp, #12]
 80016fa:	2300      	movs	r3, #0
 80016fc:	9302      	str	r3, [sp, #8]
 80016fe:	2300      	movs	r3, #0
 8001700:	9301      	str	r3, [sp, #4]
 8001702:	2303      	movs	r3, #3
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	2302      	movs	r3, #2
 8001708:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800170c:	490e      	ldr	r1, [pc, #56]	; (8001748 <Ini_GPIO+0x1a0>)
 800170e:	480f      	ldr	r0, [pc, #60]	; (800174c <Ini_GPIO+0x1a4>)
 8001710:	f7fe ff68 	bl	80005e4 <_ZN6GPIO_t4InitEP12GPIO_TypeDefmmmmmm>

}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40020000 	.word	0x40020000
 8001720:	20000020 	.word	0x20000020
 8001724:	200001f0 	.word	0x200001f0
 8001728:	20000210 	.word	0x20000210
 800172c:	200003e0 	.word	0x200003e0
 8001730:	20000400 	.word	0x20000400
 8001734:	40020400 	.word	0x40020400
 8001738:	200005d0 	.word	0x200005d0
 800173c:	200005f0 	.word	0x200005f0
 8001740:	40020c00 	.word	0x40020c00
 8001744:	200007c0 	.word	0x200007c0
 8001748:	40020800 	.word	0x40020800
 800174c:	200007e0 	.word	0x200007e0

08001750 <Ini_UART>:

void Ini_UART(){
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af06      	add	r7, sp, #24

	cust_USART1.SetUART(USART1);
 8001756:	493a      	ldr	r1, [pc, #232]	; (8001840 <Ini_UART+0xf0>)
 8001758:	483a      	ldr	r0, [pc, #232]	; (8001844 <Ini_UART+0xf4>)
 800175a:	f7ff fc30 	bl	8000fbe <_ZN6UART_t7SetUARTEP13USART_TypeDef>
	cust_USART1.SetBaudRate(9600);
 800175e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8001762:	4838      	ldr	r0, [pc, #224]	; (8001844 <Ini_UART+0xf4>)
 8001764:	f7ff fc42 	bl	8000fec <_ZN6UART_t11SetBaudRateEm>
	cust_USART1.SetDataWidth(LL_USART_DATAWIDTH_8B);
 8001768:	2100      	movs	r1, #0
 800176a:	4836      	ldr	r0, [pc, #216]	; (8001844 <Ini_UART+0xf4>)
 800176c:	f7ff fc55 	bl	800101a <_ZN6UART_t12SetDataWidthEm>
	cust_USART1.SetStopBits(LL_USART_STOPBITS_1);
 8001770:	2100      	movs	r1, #0
 8001772:	4834      	ldr	r0, [pc, #208]	; (8001844 <Ini_UART+0xf4>)
 8001774:	f7ff fc68 	bl	8001048 <_ZN6UART_t11SetStopBitsEm>
	cust_USART1.SetParity(LL_USART_PARITY_NONE);
 8001778:	2100      	movs	r1, #0
 800177a:	4832      	ldr	r0, [pc, #200]	; (8001844 <Ini_UART+0xf4>)
 800177c:	f7ff fc7b 	bl	8001076 <_ZN6UART_t9SetParityEm>
	cust_USART1.SetTransferDirection(LL_USART_DIRECTION_TX_RX);
 8001780:	210c      	movs	r1, #12
 8001782:	4830      	ldr	r0, [pc, #192]	; (8001844 <Ini_UART+0xf4>)
 8001784:	f7ff fc8e 	bl	80010a4 <_ZN6UART_t20SetTransferDirectionEm>
	cust_USART1.SetHardwareFlowControl(LL_USART_HWCONTROL_NONE);
 8001788:	2100      	movs	r1, #0
 800178a:	482e      	ldr	r0, [pc, #184]	; (8001844 <Ini_UART+0xf4>)
 800178c:	f7ff fca1 	bl	80010d2 <_ZN6UART_t22SetHardwareFlowControlEm>
	cust_USART1.SetOverSampling(LL_USART_OVERSAMPLING_16);
 8001790:	2100      	movs	r1, #0
 8001792:	482c      	ldr	r0, [pc, #176]	; (8001844 <Ini_UART+0xf4>)
 8001794:	f7ff fcb4 	bl	8001100 <_ZN6UART_t15SetOverSamplingEm>
	cust_USART1.SetIRQ(USART1_IRQn);
 8001798:	2125      	movs	r1, #37	; 0x25
 800179a:	482a      	ldr	r0, [pc, #168]	; (8001844 <Ini_UART+0xf4>)
 800179c:	f7ff fcc7 	bl	800112e <_ZN6UART_t6SetIRQE9IRQn_Type>

	cust_USART1.Init();
 80017a0:	4828      	ldr	r0, [pc, #160]	; (8001844 <Ini_UART+0xf4>)
 80017a2:	f7ff f94d 	bl	8000a40 <_ZN6UART_t4InitEv>
	cust_USART1.SetCallBackFunc(&USART1_callback);
 80017a6:	4928      	ldr	r1, [pc, #160]	; (8001848 <Ini_UART+0xf8>)
 80017a8:	4826      	ldr	r0, [pc, #152]	; (8001844 <Ini_UART+0xf4>)
 80017aa:	f7ff fcd9 	bl	8001160 <_ZN6UART_t15SetCallBackFuncEPFvvE>

	cust_USART2.Init(USART2,115200,LL_USART_DATAWIDTH_8B,LL_USART_STOPBITS_1,LL_USART_PARITY_NONE,LL_USART_DIRECTION_TX_RX,
 80017ae:	2326      	movs	r3, #38	; 0x26
 80017b0:	9305      	str	r3, [sp, #20]
 80017b2:	2300      	movs	r3, #0
 80017b4:	9304      	str	r3, [sp, #16]
 80017b6:	2300      	movs	r3, #0
 80017b8:	9303      	str	r3, [sp, #12]
 80017ba:	230c      	movs	r3, #12
 80017bc:	9302      	str	r3, [sp, #8]
 80017be:	2300      	movs	r3, #0
 80017c0:	9301      	str	r3, [sp, #4]
 80017c2:	2300      	movs	r3, #0
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	2300      	movs	r3, #0
 80017c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017cc:	491f      	ldr	r1, [pc, #124]	; (800184c <Ini_UART+0xfc>)
 80017ce:	4820      	ldr	r0, [pc, #128]	; (8001850 <Ini_UART+0x100>)
 80017d0:	f7ff fa1a 	bl	8000c08 <_ZN6UART_t4InitEP13USART_TypeDefmmmmmmm9IRQn_Type>
					 LL_USART_HWCONTROL_NONE,LL_USART_OVERSAMPLING_16,USART2_IRQn);
	cust_USART2.SetCallBackFunc(&USART2_callback);
 80017d4:	491f      	ldr	r1, [pc, #124]	; (8001854 <Ini_UART+0x104>)
 80017d6:	481e      	ldr	r0, [pc, #120]	; (8001850 <Ini_UART+0x100>)
 80017d8:	f7ff fcc2 	bl	8001160 <_ZN6UART_t15SetCallBackFuncEPFvvE>

	cust_USART3.Init(USART3,9600,LL_USART_DATAWIDTH_8B,LL_USART_STOPBITS_1,LL_USART_PARITY_NONE,LL_USART_DIRECTION_TX_RX,
 80017dc:	2327      	movs	r3, #39	; 0x27
 80017de:	9305      	str	r3, [sp, #20]
 80017e0:	2300      	movs	r3, #0
 80017e2:	9304      	str	r3, [sp, #16]
 80017e4:	2300      	movs	r3, #0
 80017e6:	9303      	str	r3, [sp, #12]
 80017e8:	230c      	movs	r3, #12
 80017ea:	9302      	str	r3, [sp, #8]
 80017ec:	2300      	movs	r3, #0
 80017ee:	9301      	str	r3, [sp, #4]
 80017f0:	2300      	movs	r3, #0
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	2300      	movs	r3, #0
 80017f6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017fa:	4917      	ldr	r1, [pc, #92]	; (8001858 <Ini_UART+0x108>)
 80017fc:	4817      	ldr	r0, [pc, #92]	; (800185c <Ini_UART+0x10c>)
 80017fe:	f7ff fa03 	bl	8000c08 <_ZN6UART_t4InitEP13USART_TypeDefmmmmmmm9IRQn_Type>
						 LL_USART_HWCONTROL_NONE,LL_USART_OVERSAMPLING_16,USART3_IRQn);
	cust_USART3.SetCallBackFunc(&USART3_callback);
 8001802:	4917      	ldr	r1, [pc, #92]	; (8001860 <Ini_UART+0x110>)
 8001804:	4815      	ldr	r0, [pc, #84]	; (800185c <Ini_UART+0x10c>)
 8001806:	f7ff fcab 	bl	8001160 <_ZN6UART_t15SetCallBackFuncEPFvvE>

	cust_UART5.Init(UART5,115200,LL_USART_DATAWIDTH_8B,LL_USART_STOPBITS_1,LL_USART_PARITY_NONE,LL_USART_DIRECTION_TX_RX,
 800180a:	2335      	movs	r3, #53	; 0x35
 800180c:	9305      	str	r3, [sp, #20]
 800180e:	2300      	movs	r3, #0
 8001810:	9304      	str	r3, [sp, #16]
 8001812:	2300      	movs	r3, #0
 8001814:	9303      	str	r3, [sp, #12]
 8001816:	230c      	movs	r3, #12
 8001818:	9302      	str	r3, [sp, #8]
 800181a:	2300      	movs	r3, #0
 800181c:	9301      	str	r3, [sp, #4]
 800181e:	2300      	movs	r3, #0
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	2300      	movs	r3, #0
 8001824:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001828:	490e      	ldr	r1, [pc, #56]	; (8001864 <Ini_UART+0x114>)
 800182a:	480f      	ldr	r0, [pc, #60]	; (8001868 <Ini_UART+0x118>)
 800182c:	f7ff f9ec 	bl	8000c08 <_ZN6UART_t4InitEP13USART_TypeDefmmmmmmm9IRQn_Type>
						 LL_USART_HWCONTROL_NONE,LL_USART_OVERSAMPLING_16,UART5_IRQn);
	cust_UART5.SetCallBackFunc(&UART5_callback);
 8001830:	490e      	ldr	r1, [pc, #56]	; (800186c <Ini_UART+0x11c>)
 8001832:	480d      	ldr	r0, [pc, #52]	; (8001868 <Ini_UART+0x118>)
 8001834:	f7ff fc94 	bl	8001160 <_ZN6UART_t15SetCallBackFuncEPFvvE>
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40011000 	.word	0x40011000
 8001844:	20000040 	.word	0x20000040
 8001848:	08001871 	.word	0x08001871
 800184c:	40004400 	.word	0x40004400
 8001850:	20000230 	.word	0x20000230
 8001854:	080018ad 	.word	0x080018ad
 8001858:	40004800 	.word	0x40004800
 800185c:	20000420 	.word	0x20000420
 8001860:	080018e9 	.word	0x080018e9
 8001864:	40005000 	.word	0x40005000
 8001868:	20000610 	.word	0x20000610
 800186c:	08001925 	.word	0x08001925

08001870 <USART1_callback>:

void USART1_callback()
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	if(READ_BIT(USART1->SR,USART_SR_RXNE)){
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <USART1_callback+0x34>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0320 	and.w	r3, r3, #32
 800187c:	2b00      	cmp	r3, #0
 800187e:	bf14      	ite	ne
 8001880:	2301      	movne	r3, #1
 8001882:	2300      	moveq	r3, #0
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d007      	beq.n	800189a <USART1_callback+0x2a>
		cust_USART1.AddReceiveData((uint8_t)(USART1->DR & 0x00FF));
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <USART1_callback+0x34>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	b2db      	uxtb	r3, r3
 8001890:	4619      	mov	r1, r3
 8001892:	4805      	ldr	r0, [pc, #20]	; (80018a8 <USART1_callback+0x38>)
 8001894:	f7ff fa48 	bl	8000d28 <_ZN6UART_t14AddReceiveDataEh>
	}
	else
		(void) USART1->DR;
}
 8001898:	e001      	b.n	800189e <USART1_callback+0x2e>
		(void) USART1->DR;
 800189a:	4b02      	ldr	r3, [pc, #8]	; (80018a4 <USART1_callback+0x34>)
 800189c:	685b      	ldr	r3, [r3, #4]
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40011000 	.word	0x40011000
 80018a8:	20000040 	.word	0x20000040

080018ac <USART2_callback>:

void USART2_callback()
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	if(READ_BIT(USART2->SR,USART_SR_RXNE)){
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <USART2_callback+0x34>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0320 	and.w	r3, r3, #32
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	bf14      	ite	ne
 80018bc:	2301      	movne	r3, #1
 80018be:	2300      	moveq	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d007      	beq.n	80018d6 <USART2_callback+0x2a>
		cust_USART2.AddReceiveData((uint8_t)(USART2->DR & 0x00FF));
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <USART2_callback+0x34>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	4619      	mov	r1, r3
 80018ce:	4805      	ldr	r0, [pc, #20]	; (80018e4 <USART2_callback+0x38>)
 80018d0:	f7ff fa2a 	bl	8000d28 <_ZN6UART_t14AddReceiveDataEh>
	}
	else
		(void) USART2->DR;
}
 80018d4:	e001      	b.n	80018da <USART2_callback+0x2e>
		(void) USART2->DR;
 80018d6:	4b02      	ldr	r3, [pc, #8]	; (80018e0 <USART2_callback+0x34>)
 80018d8:	685b      	ldr	r3, [r3, #4]
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40004400 	.word	0x40004400
 80018e4:	20000230 	.word	0x20000230

080018e8 <USART3_callback>:

void USART3_callback()
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
	if(READ_BIT(USART3->SR,USART_SR_RXNE)){
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <USART3_callback+0x34>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0320 	and.w	r3, r3, #32
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	bf14      	ite	ne
 80018f8:	2301      	movne	r3, #1
 80018fa:	2300      	moveq	r3, #0
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d007      	beq.n	8001912 <USART3_callback+0x2a>
		cust_USART3.AddReceiveData((uint8_t)(USART3->DR & 0x00FF));
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <USART3_callback+0x34>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	b2db      	uxtb	r3, r3
 8001908:	4619      	mov	r1, r3
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <USART3_callback+0x38>)
 800190c:	f7ff fa0c 	bl	8000d28 <_ZN6UART_t14AddReceiveDataEh>
	}
	else
		(void) USART3->DR;
}
 8001910:	e001      	b.n	8001916 <USART3_callback+0x2e>
		(void) USART3->DR;
 8001912:	4b02      	ldr	r3, [pc, #8]	; (800191c <USART3_callback+0x34>)
 8001914:	685b      	ldr	r3, [r3, #4]
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40004800 	.word	0x40004800
 8001920:	20000420 	.word	0x20000420

08001924 <UART5_callback>:

void UART5_callback()
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
	if(READ_BIT(UART5->SR,USART_SR_RXNE)){
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <UART5_callback+0x34>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0320 	and.w	r3, r3, #32
 8001930:	2b00      	cmp	r3, #0
 8001932:	bf14      	ite	ne
 8001934:	2301      	movne	r3, #1
 8001936:	2300      	moveq	r3, #0
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d007      	beq.n	800194e <UART5_callback+0x2a>
		cust_UART5.AddReceiveData((uint8_t)(UART5->DR & 0x00FF));
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <UART5_callback+0x34>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	b2db      	uxtb	r3, r3
 8001944:	4619      	mov	r1, r3
 8001946:	4805      	ldr	r0, [pc, #20]	; (800195c <UART5_callback+0x38>)
 8001948:	f7ff f9ee 	bl	8000d28 <_ZN6UART_t14AddReceiveDataEh>
	}
	else
		(void) UART5->DR;
}
 800194c:	e001      	b.n	8001952 <UART5_callback+0x2e>
		(void) UART5->DR;
 800194e:	4b02      	ldr	r3, [pc, #8]	; (8001958 <UART5_callback+0x34>)
 8001950:	685b      	ldr	r3, [r3, #4]
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40005000 	.word	0x40005000
 800195c:	20000610 	.word	0x20000610

08001960 <_Z41__static_initialization_and_destruction_0ii>:
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d12b      	bne.n	80019c8 <_Z41__static_initialization_and_destruction_0ii+0x68>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001976:	4293      	cmp	r3, r2
 8001978:	d126      	bne.n	80019c8 <_Z41__static_initialization_and_destruction_0ii+0x68>
GPIO_t cust_GPIO_Bt_User;
 800197a:	482d      	ldr	r0, [pc, #180]	; (8001a30 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800197c:	f7ff fc8c 	bl	8001298 <_ZN6GPIO_tC1Ev>
UART_t cust_USART1;
 8001980:	482c      	ldr	r0, [pc, #176]	; (8001a34 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8001982:	f7ff faf7 	bl	8000f74 <_ZN6UART_tC1Ev>
GPIO_t cust_GPIO_RX_USART1;
 8001986:	482c      	ldr	r0, [pc, #176]	; (8001a38 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8001988:	f7ff fc86 	bl	8001298 <_ZN6GPIO_tC1Ev>
GPIO_t cust_GPIO_TX_USART1;
 800198c:	482b      	ldr	r0, [pc, #172]	; (8001a3c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 800198e:	f7ff fc83 	bl	8001298 <_ZN6GPIO_tC1Ev>
UART_t cust_USART2;
 8001992:	482b      	ldr	r0, [pc, #172]	; (8001a40 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8001994:	f7ff faee 	bl	8000f74 <_ZN6UART_tC1Ev>
GPIO_t cust_GPIO_RX_USART2;
 8001998:	482a      	ldr	r0, [pc, #168]	; (8001a44 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 800199a:	f7ff fc7d 	bl	8001298 <_ZN6GPIO_tC1Ev>
GPIO_t cust_GPIO_TX_USART2;
 800199e:	482a      	ldr	r0, [pc, #168]	; (8001a48 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 80019a0:	f7ff fc7a 	bl	8001298 <_ZN6GPIO_tC1Ev>
UART_t cust_USART3;
 80019a4:	4829      	ldr	r0, [pc, #164]	; (8001a4c <_Z41__static_initialization_and_destruction_0ii+0xec>)
 80019a6:	f7ff fae5 	bl	8000f74 <_ZN6UART_tC1Ev>
GPIO_t cust_GPIO_RX_USART3;
 80019aa:	4829      	ldr	r0, [pc, #164]	; (8001a50 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 80019ac:	f7ff fc74 	bl	8001298 <_ZN6GPIO_tC1Ev>
GPIO_t cust_GPIO_TX_USART3;
 80019b0:	4828      	ldr	r0, [pc, #160]	; (8001a54 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 80019b2:	f7ff fc71 	bl	8001298 <_ZN6GPIO_tC1Ev>
UART_t cust_UART5;
 80019b6:	4828      	ldr	r0, [pc, #160]	; (8001a58 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 80019b8:	f7ff fadc 	bl	8000f74 <_ZN6UART_tC1Ev>
GPIO_t cust_GPIO_RX_UART5;
 80019bc:	4827      	ldr	r0, [pc, #156]	; (8001a5c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 80019be:	f7ff fc6b 	bl	8001298 <_ZN6GPIO_tC1Ev>
GPIO_t cust_GPIO_TX_UART5;
 80019c2:	4827      	ldr	r0, [pc, #156]	; (8001a60 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 80019c4:	f7ff fc68 	bl	8001298 <_ZN6GPIO_tC1Ev>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d12b      	bne.n	8001a26 <_Z41__static_initialization_and_destruction_0ii+0xc6>
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d126      	bne.n	8001a26 <_Z41__static_initialization_and_destruction_0ii+0xc6>
 80019d8:	4821      	ldr	r0, [pc, #132]	; (8001a60 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 80019da:	f7ff fc6b 	bl	80012b4 <_ZN6GPIO_tD1Ev>
GPIO_t cust_GPIO_RX_UART5;
 80019de:	481f      	ldr	r0, [pc, #124]	; (8001a5c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 80019e0:	f7ff fc68 	bl	80012b4 <_ZN6GPIO_tD1Ev>
UART_t cust_UART5;
 80019e4:	481c      	ldr	r0, [pc, #112]	; (8001a58 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 80019e6:	f7ff fadf 	bl	8000fa8 <_ZN6UART_tD1Ev>
GPIO_t cust_GPIO_TX_USART3;
 80019ea:	481a      	ldr	r0, [pc, #104]	; (8001a54 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 80019ec:	f7ff fc62 	bl	80012b4 <_ZN6GPIO_tD1Ev>
GPIO_t cust_GPIO_RX_USART3;
 80019f0:	4817      	ldr	r0, [pc, #92]	; (8001a50 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 80019f2:	f7ff fc5f 	bl	80012b4 <_ZN6GPIO_tD1Ev>
UART_t cust_USART3;
 80019f6:	4815      	ldr	r0, [pc, #84]	; (8001a4c <_Z41__static_initialization_and_destruction_0ii+0xec>)
 80019f8:	f7ff fad6 	bl	8000fa8 <_ZN6UART_tD1Ev>
GPIO_t cust_GPIO_TX_USART2;
 80019fc:	4812      	ldr	r0, [pc, #72]	; (8001a48 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 80019fe:	f7ff fc59 	bl	80012b4 <_ZN6GPIO_tD1Ev>
GPIO_t cust_GPIO_RX_USART2;
 8001a02:	4810      	ldr	r0, [pc, #64]	; (8001a44 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8001a04:	f7ff fc56 	bl	80012b4 <_ZN6GPIO_tD1Ev>
UART_t cust_USART2;
 8001a08:	480d      	ldr	r0, [pc, #52]	; (8001a40 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8001a0a:	f7ff facd 	bl	8000fa8 <_ZN6UART_tD1Ev>
GPIO_t cust_GPIO_TX_USART1;
 8001a0e:	480b      	ldr	r0, [pc, #44]	; (8001a3c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8001a10:	f7ff fc50 	bl	80012b4 <_ZN6GPIO_tD1Ev>
GPIO_t cust_GPIO_RX_USART1;
 8001a14:	4808      	ldr	r0, [pc, #32]	; (8001a38 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8001a16:	f7ff fc4d 	bl	80012b4 <_ZN6GPIO_tD1Ev>
UART_t cust_USART1;
 8001a1a:	4806      	ldr	r0, [pc, #24]	; (8001a34 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8001a1c:	f7ff fac4 	bl	8000fa8 <_ZN6UART_tD1Ev>
GPIO_t cust_GPIO_Bt_User;
 8001a20:	4803      	ldr	r0, [pc, #12]	; (8001a30 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8001a22:	f7ff fc47 	bl	80012b4 <_ZN6GPIO_tD1Ev>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000020 	.word	0x20000020
 8001a34:	20000040 	.word	0x20000040
 8001a38:	200001f0 	.word	0x200001f0
 8001a3c:	20000210 	.word	0x20000210
 8001a40:	20000230 	.word	0x20000230
 8001a44:	200003e0 	.word	0x200003e0
 8001a48:	20000400 	.word	0x20000400
 8001a4c:	20000420 	.word	0x20000420
 8001a50:	200005d0 	.word	0x200005d0
 8001a54:	200005f0 	.word	0x200005f0
 8001a58:	20000610 	.word	0x20000610
 8001a5c:	200007c0 	.word	0x200007c0
 8001a60:	200007e0 	.word	0x200007e0

08001a64 <_GLOBAL__sub_I_cust_GPIO_Bt_User>:
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	f7ff ff77 	bl	8001960 <_Z41__static_initialization_and_destruction_0ii>
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <_GLOBAL__sub_D_cust_GPIO_Bt_User>:
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f7ff ff6f 	bl	8001960 <_Z41__static_initialization_and_destruction_0ii>
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <__NVIC_SetPriorityGrouping>:
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ab6:	4a04      	ldr	r2, [pc, #16]	; (8001ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	60d3      	str	r3, [r2, #12]
}
 8001abc:	bf00      	nop
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <__NVIC_GetPriorityGrouping>:
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad0:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	0a1b      	lsrs	r3, r3, #8
 8001ad6:	f003 0307 	and.w	r3, r3, #7
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <__NVIC_SetPriority>:
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	db0a      	blt.n	8001b12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	490c      	ldr	r1, [pc, #48]	; (8001b34 <__NVIC_SetPriority+0x4c>)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	0112      	lsls	r2, r2, #4
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b10:	e00a      	b.n	8001b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	4908      	ldr	r1, [pc, #32]	; (8001b38 <__NVIC_SetPriority+0x50>)
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	3b04      	subs	r3, #4
 8001b20:	0112      	lsls	r2, r2, #4
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	440b      	add	r3, r1
 8001b26:	761a      	strb	r2, [r3, #24]
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000e100 	.word	0xe000e100
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <NVIC_EncodePriority>:
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b089      	sub	sp, #36	; 0x24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f1c3 0307 	rsb	r3, r3, #7
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	bf28      	it	cs
 8001b5a:	2304      	movcs	r3, #4
 8001b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3304      	adds	r3, #4
 8001b62:	2b06      	cmp	r3, #6
 8001b64:	d902      	bls.n	8001b6c <NVIC_EncodePriority+0x30>
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3b03      	subs	r3, #3
 8001b6a:	e000      	b.n	8001b6e <NVIC_EncodePriority+0x32>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b70:	f04f 32ff 	mov.w	r2, #4294967295
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43da      	mvns	r2, r3
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	401a      	ands	r2, r3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b84:	f04f 31ff 	mov.w	r1, #4294967295
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	43d9      	mvns	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b94:	4313      	orrs	r3, r2
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3724      	adds	r7, #36	; 0x24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <LL_RCC_HSI_Enable+0x1c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <LL_RCC_HSI_Enable+0x1c>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6013      	str	r3, [r2, #0]
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40023800 	.word	0x40023800

08001bc4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <LL_RCC_HSI_IsReady+0x20>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	bf0c      	ite	eq
 8001bd4:	2301      	moveq	r3, #1
 8001bd6:	2300      	movne	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	40023800 	.word	0x40023800

08001be8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001bf0:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	4904      	ldr	r1, [pc, #16]	; (8001c10 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	600b      	str	r3, [r1, #0]
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800

08001c14 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <LL_RCC_SetSysClkSource+0x24>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f023 0203 	bic.w	r2, r3, #3
 8001c24:	4904      	ldr	r1, [pc, #16]	; (8001c38 <LL_RCC_SetSysClkSource+0x24>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	608b      	str	r3, [r1, #8]
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	40023800 	.word	0x40023800

08001c3c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001c40:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <LL_RCC_GetSysClkSource+0x18>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 030c 	and.w	r3, r3, #12
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800

08001c58 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <LL_RCC_SetAHBPrescaler+0x24>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c68:	4904      	ldr	r1, [pc, #16]	; (8001c7c <LL_RCC_SetAHBPrescaler+0x24>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	608b      	str	r3, [r1, #8]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	40023800 	.word	0x40023800

08001c80 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c90:	4904      	ldr	r1, [pc, #16]	; (8001ca4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	608b      	str	r3, [r1, #8]
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	40023800 	.word	0x40023800

08001ca8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <LL_RCC_SetAPB2Prescaler+0x24>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cb8:	4904      	ldr	r1, [pc, #16]	; (8001ccc <LL_RCC_SetAPB2Prescaler+0x24>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	608b      	str	r3, [r1, #8]
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	40023800 	.word	0x40023800

08001cd0 <LL_APB1_GRP1_EnableClock>:
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001cda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cdc:	4907      	ldr	r1, [pc, #28]	; (8001cfc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ce6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4013      	ands	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cee:	68fb      	ldr	r3, [r7, #12]
}
 8001cf0:	bf00      	nop
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	40023800 	.word	0x40023800

08001d00 <LL_APB2_GRP1_EnableClock>:
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001d0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d0c:	4907      	ldr	r1, [pc, #28]	; (8001d2c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001d14:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001d16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
}
 8001d20:	bf00      	nop
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	40023800 	.word	0x40023800

08001d30 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <LL_FLASH_SetLatency+0x24>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f023 0207 	bic.w	r2, r3, #7
 8001d40:	4904      	ldr	r1, [pc, #16]	; (8001d54 <LL_FLASH_SetLatency+0x24>)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	600b      	str	r3, [r1, #0]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40023c00 	.word	0x40023c00

08001d58 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001d5c:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <LL_FLASH_GetLatency+0x18>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0307 	and.w	r3, r3, #7
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40023c00 	.word	0x40023c00

08001d74 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001d84:	4904      	ldr	r1, [pc, #16]	; (8001d98 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	600b      	str	r3, [r1, #0]
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	40007000 	.word	0x40007000

08001d9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001da0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001da4:	f7ff ffac 	bl	8001d00 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001da8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001dac:	f7ff ff90 	bl	8001cd0 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db0:	2003      	movs	r0, #3
 8001db2:	f7ff fe67 	bl	8001a84 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8001db6:	f7ff fe89 	bl	8001acc <__NVIC_GetPriorityGrouping>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	210f      	movs	r1, #15
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff febb 	bl	8001b3c <NVIC_EncodePriority>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f04f 30ff 	mov.w	r0, #4294967295
 8001dce:	f7ff fe8b 	bl	8001ae8 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dd2:	f000 f803 	bl	8001ddc <SystemClock_Config>
  MX_USART2_UART_Init();
  MX_USART3_UART_Init();
  /* USER CODE BEGIN 2 */
#endif
  //LL_GPIO_SetOutputPin(LED_GPIO_Port, LED_Pin);
  alt_main();
 8001dd6:	f7ff fb2d 	bl	8001434 <alt_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001dda:	e7fe      	b.n	8001dda <main+0x3e>

08001ddc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001de0:	2000      	movs	r0, #0
 8001de2:	f7ff ffa5 	bl	8001d30 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8001de6:	bf00      	nop
 8001de8:	f7ff ffb6 	bl	8001d58 <LL_FLASH_GetLatency>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1fa      	bne.n	8001de8 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001df2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001df6:	f7ff ffbd 	bl	8001d74 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8001dfa:	2010      	movs	r0, #16
 8001dfc:	f7ff fef4 	bl	8001be8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8001e00:	f7ff fed0 	bl	8001ba4 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001e04:	bf00      	nop
 8001e06:	f7ff fedd 	bl	8001bc4 <LL_RCC_HSI_IsReady>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d1fa      	bne.n	8001e06 <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001e10:	2000      	movs	r0, #0
 8001e12:	f7ff ff21 	bl	8001c58 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001e16:	2000      	movs	r0, #0
 8001e18:	f7ff ff32 	bl	8001c80 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f7ff ff43 	bl	8001ca8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001e22:	2000      	movs	r0, #0
 8001e24:	f7ff fef6 	bl	8001c14 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001e28:	bf00      	nop
 8001e2a:	f7ff ff07 	bl	8001c3c <LL_RCC_GetSysClkSource>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1fa      	bne.n	8001e2a <SystemClock_Config+0x4e>
  {

  }
  LL_Init1msTick(16000000);
 8001e34:	4803      	ldr	r0, [pc, #12]	; (8001e44 <SystemClock_Config+0x68>)
 8001e36:	f000 fe49 	bl	8002acc <LL_Init1msTick>
  LL_SetSystemCoreClock(16000000);
 8001e3a:	4802      	ldr	r0, [pc, #8]	; (8001e44 <SystemClock_Config+0x68>)
 8001e3c:	f000 fe54 	bl	8002ae8 <LL_SetSystemCoreClock>
}
 8001e40:	bf00      	nop
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	00f42400 	.word	0x00f42400

08001e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <NMI_Handler+0x4>

08001e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e52:	e7fe      	b.n	8001e52 <HardFault_Handler+0x4>

08001e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e58:	e7fe      	b.n	8001e58 <MemManage_Handler+0x4>

08001e5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e5e:	e7fe      	b.n	8001e5e <BusFault_Handler+0x4>

08001e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e64:	e7fe      	b.n	8001e64 <UsageFault_Handler+0x4>

08001e66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
	...

08001ea0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
	alt_UART_IRQ(USART1);
 8001ea4:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <USART1_IRQHandler+0x10>)
 8001ea6:	f7ff fb37 	bl	8001518 <alt_UART_IRQ>
  /* USER CODE END USART1_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40011000 	.word	0x40011000

08001eb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */
	alt_UART_IRQ(USART2);
 8001eb8:	4802      	ldr	r0, [pc, #8]	; (8001ec4 <USART2_IRQHandler+0x10>)
 8001eba:	f7ff fb2d 	bl	8001518 <alt_UART_IRQ>
  /* USER CODE END USART2_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40004400 	.word	0x40004400

08001ec8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */
	alt_UART_IRQ(USART3);
 8001ecc:	4802      	ldr	r0, [pc, #8]	; (8001ed8 <USART3_IRQHandler+0x10>)
 8001ece:	f7ff fb23 	bl	8001518 <alt_UART_IRQ>
  /* USER CODE END USART3_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40004800 	.word	0x40004800

08001edc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */
	alt_UART_IRQ(UART5);
 8001ee0:	4802      	ldr	r0, [pc, #8]	; (8001eec <UART5_IRQHandler+0x10>)
 8001ee2:	f7ff fb19 	bl	8001518 <alt_UART_IRQ>
  /* USER CODE END UART5_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40005000 	.word	0x40005000

08001ef0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <SystemInit+0x20>)
 8001ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001efa:	4a05      	ldr	r2, [pc, #20]	; (8001f10 <SystemInit+0x20>)
 8001efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f18:	480d      	ldr	r0, [pc, #52]	; (8001f50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f1a:	490e      	ldr	r1, [pc, #56]	; (8001f54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f1c:	4a0e      	ldr	r2, [pc, #56]	; (8001f58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f20:	e002      	b.n	8001f28 <LoopCopyDataInit>

08001f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f26:	3304      	adds	r3, #4

08001f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f2c:	d3f9      	bcc.n	8001f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f2e:	4a0b      	ldr	r2, [pc, #44]	; (8001f5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f30:	4c0b      	ldr	r4, [pc, #44]	; (8001f60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f34:	e001      	b.n	8001f3a <LoopFillZerobss>

08001f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f38:	3204      	adds	r2, #4

08001f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f3c:	d3fb      	bcc.n	8001f36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f3e:	f7ff ffd7 	bl	8001ef0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f42:	f000 fde1 	bl	8002b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f46:	f7ff ff29 	bl	8001d9c <main>
  bx  lr    
 8001f4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f54:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001f58:	08002b98 	.word	0x08002b98
  ldr r2, =_sbss
 8001f5c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001f60:	20000800 	.word	0x20000800

08001f64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f64:	e7fe      	b.n	8001f64 <ADC_IRQHandler>

08001f66 <LL_GPIO_SetPinMode>:
{
 8001f66:	b480      	push	{r7}
 8001f68:	b089      	sub	sp, #36	; 0x24
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	fa93 f3a3 	rbit	r3, r3
 8001f80:	613b      	str	r3, [r7, #16]
  return result;
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	fab3 f383 	clz	r3, r3
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	2103      	movs	r1, #3
 8001f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	401a      	ands	r2, r3
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	fa93 f3a3 	rbit	r3, r3
 8001fa0:	61bb      	str	r3, [r7, #24]
  return result;
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	fab3 f383 	clz	r3, r3
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	601a      	str	r2, [r3, #0]
}
 8001fb8:	bf00      	nop
 8001fba:	3724      	adds	r7, #36	; 0x24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <LL_GPIO_SetPinOutputType>:
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	401a      	ands	r2, r3
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	fb01 f303 	mul.w	r3, r1, r3
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	605a      	str	r2, [r3, #4]
}
 8001fe8:	bf00      	nop
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <LL_GPIO_SetPinSpeed>:
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b089      	sub	sp, #36	; 0x24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	fa93 f3a3 	rbit	r3, r3
 800200e:	613b      	str	r3, [r7, #16]
  return result;
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	fab3 f383 	clz	r3, r3
 8002016:	b2db      	uxtb	r3, r3
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	2103      	movs	r1, #3
 800201c:	fa01 f303 	lsl.w	r3, r1, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	401a      	ands	r2, r3
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	61bb      	str	r3, [r7, #24]
  return result;
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	fab3 f383 	clz	r3, r3
 8002036:	b2db      	uxtb	r3, r3
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	fa01 f303 	lsl.w	r3, r1, r3
 8002040:	431a      	orrs	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	609a      	str	r2, [r3, #8]
}
 8002046:	bf00      	nop
 8002048:	3724      	adds	r7, #36	; 0x24
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <LL_GPIO_SetPinPull>:
{
 8002052:	b480      	push	{r7}
 8002054:	b089      	sub	sp, #36	; 0x24
 8002056:	af00      	add	r7, sp, #0
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	68da      	ldr	r2, [r3, #12]
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	fa93 f3a3 	rbit	r3, r3
 800206c:	613b      	str	r3, [r7, #16]
  return result;
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	fab3 f383 	clz	r3, r3
 8002074:	b2db      	uxtb	r3, r3
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	2103      	movs	r1, #3
 800207a:	fa01 f303 	lsl.w	r3, r1, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	401a      	ands	r2, r3
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	fa93 f3a3 	rbit	r3, r3
 800208c:	61bb      	str	r3, [r7, #24]
  return result;
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	fab3 f383 	clz	r3, r3
 8002094:	b2db      	uxtb	r3, r3
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	431a      	orrs	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	60da      	str	r2, [r3, #12]
}
 80020a4:	bf00      	nop
 80020a6:	3724      	adds	r7, #36	; 0x24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <LL_GPIO_SetAFPin_0_7>:
{
 80020b0:	b480      	push	{r7}
 80020b2:	b089      	sub	sp, #36	; 0x24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6a1a      	ldr	r2, [r3, #32]
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	fa93 f3a3 	rbit	r3, r3
 80020ca:	613b      	str	r3, [r7, #16]
  return result;
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	fab3 f383 	clz	r3, r3
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	210f      	movs	r1, #15
 80020d8:	fa01 f303 	lsl.w	r3, r1, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	401a      	ands	r2, r3
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	fa93 f3a3 	rbit	r3, r3
 80020ea:	61bb      	str	r3, [r7, #24]
  return result;
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	fa01 f303 	lsl.w	r3, r1, r3
 80020fc:	431a      	orrs	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	621a      	str	r2, [r3, #32]
}
 8002102:	bf00      	nop
 8002104:	3724      	adds	r7, #36	; 0x24
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <LL_GPIO_SetAFPin_8_15>:
{
 800210e:	b480      	push	{r7}
 8002110:	b089      	sub	sp, #36	; 0x24
 8002112:	af00      	add	r7, sp, #0
 8002114:	60f8      	str	r0, [r7, #12]
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	0a1b      	lsrs	r3, r3, #8
 8002122:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fa93 f3a3 	rbit	r3, r3
 800212a:	613b      	str	r3, [r7, #16]
  return result;
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	fab3 f383 	clz	r3, r3
 8002132:	b2db      	uxtb	r3, r3
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	210f      	movs	r1, #15
 8002138:	fa01 f303 	lsl.w	r3, r1, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	401a      	ands	r2, r3
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	0a1b      	lsrs	r3, r3, #8
 8002144:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	fa93 f3a3 	rbit	r3, r3
 800214c:	61bb      	str	r3, [r7, #24]
  return result;
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	fab3 f383 	clz	r3, r3
 8002154:	b2db      	uxtb	r3, r3
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	fa01 f303 	lsl.w	r3, r1, r3
 800215e:	431a      	orrs	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002164:	bf00      	nop
 8002166:	3724      	adds	r7, #36	; 0x24
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b088      	sub	sp, #32
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800217e:	2300      	movs	r3, #0
 8002180:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	fa93 f3a3 	rbit	r3, r3
 800218e:	613b      	str	r3, [r7, #16]
  return result;
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	fab3 f383 	clz	r3, r3
 8002196:	b2db      	uxtb	r3, r3
 8002198:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800219a:	e050      	b.n	800223e <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	2101      	movs	r1, #1
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	fa01 f303 	lsl.w	r3, r1, r3
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d042      	beq.n	8002238 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d003      	beq.n	80021c2 <LL_GPIO_Init+0x52>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d10d      	bne.n	80021de <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	461a      	mov	r2, r3
 80021c8:	69b9      	ldr	r1, [r7, #24]
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff ff12 	bl	8001ff4 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	461a      	mov	r2, r3
 80021d6:	69b9      	ldr	r1, [r7, #24]
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff fef3 	bl	8001fc4 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	461a      	mov	r2, r3
 80021e4:	69b9      	ldr	r1, [r7, #24]
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff ff33 	bl	8002052 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d11a      	bne.n	800222a <LL_GPIO_Init+0xba>
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	fa93 f3a3 	rbit	r3, r3
 80021fe:	60bb      	str	r3, [r7, #8]
  return result;
 8002200:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b07      	cmp	r3, #7
 800220a:	d807      	bhi.n	800221c <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	461a      	mov	r2, r3
 8002212:	69b9      	ldr	r1, [r7, #24]
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ff4b 	bl	80020b0 <LL_GPIO_SetAFPin_0_7>
 800221a:	e006      	b.n	800222a <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	461a      	mov	r2, r3
 8002222:	69b9      	ldr	r1, [r7, #24]
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff ff72 	bl	800210e <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	461a      	mov	r2, r3
 8002230:	69b9      	ldr	r1, [r7, #24]
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff fe97 	bl	8001f66 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	3301      	adds	r3, #1
 800223c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	fa22 f303 	lsr.w	r3, r2, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1a7      	bne.n	800219c <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3720      	adds	r7, #32
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <LL_RCC_GetSysClkSource>:
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800225c:	4b04      	ldr	r3, [pc, #16]	; (8002270 <LL_RCC_GetSysClkSource+0x18>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 030c 	and.w	r3, r3, #12
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40023800 	.word	0x40023800

08002274 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002278:	4b04      	ldr	r3, [pc, #16]	; (800228c <LL_RCC_GetAHBPrescaler+0x18>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002280:	4618      	mov	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40023800 	.word	0x40023800

08002290 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002294:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 800229c:	4618      	mov	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800

080022ac <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80022b0:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <LL_RCC_GetAPB2Prescaler+0x18>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40023800 	.word	0x40023800

080022c8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80022cc:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <LL_RCC_PLL_GetMainSource+0x18>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40023800 	.word	0x40023800

080022e4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80022e8:	4b04      	ldr	r3, [pc, #16]	; (80022fc <LL_RCC_PLL_GetN+0x18>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	099b      	lsrs	r3, r3, #6
 80022ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	40023800 	.word	0x40023800

08002300 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <LL_RCC_PLL_GetP+0x18>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800230c:	4618      	mov	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40023800 	.word	0x40023800

0800231c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002320:	4b04      	ldr	r3, [pc, #16]	; (8002334 <LL_RCC_PLL_GetDivider+0x18>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8002328:	4618      	mov	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40023800 	.word	0x40023800

08002338 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002340:	f000 f820 	bl	8002384 <RCC_GetSystemClockFreq>
 8002344:	4602      	mov	r2, r0
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f000 f840 	bl	80023d4 <RCC_GetHCLKClockFreq>
 8002354:	4602      	mov	r2, r0
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	4618      	mov	r0, r3
 8002360:	f000 f84e 	bl	8002400 <RCC_GetPCLK1ClockFreq>
 8002364:	4602      	mov	r2, r0
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	4618      	mov	r0, r3
 8002370:	f000 f85a 	bl	8002428 <RCC_GetPCLK2ClockFreq>
 8002374:	4602      	mov	r2, r0
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	60da      	str	r2, [r3, #12]
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800238e:	f7ff ff63 	bl	8002258 <LL_RCC_GetSysClkSource>
 8002392:	4603      	mov	r3, r0
 8002394:	2b08      	cmp	r3, #8
 8002396:	d00c      	beq.n	80023b2 <RCC_GetSystemClockFreq+0x2e>
 8002398:	2b08      	cmp	r3, #8
 800239a:	d80f      	bhi.n	80023bc <RCC_GetSystemClockFreq+0x38>
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <RCC_GetSystemClockFreq+0x22>
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d003      	beq.n	80023ac <RCC_GetSystemClockFreq+0x28>
 80023a4:	e00a      	b.n	80023bc <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80023a6:	4b09      	ldr	r3, [pc, #36]	; (80023cc <RCC_GetSystemClockFreq+0x48>)
 80023a8:	607b      	str	r3, [r7, #4]
      break;
 80023aa:	e00a      	b.n	80023c2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <RCC_GetSystemClockFreq+0x4c>)
 80023ae:	607b      	str	r3, [r7, #4]
      break;
 80023b0:	e007      	b.n	80023c2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80023b2:	2008      	movs	r0, #8
 80023b4:	f000 f84c 	bl	8002450 <RCC_PLL_GetFreqDomain_SYS>
 80023b8:	6078      	str	r0, [r7, #4]
      break;
 80023ba:	e002      	b.n	80023c2 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80023bc:	4b03      	ldr	r3, [pc, #12]	; (80023cc <RCC_GetSystemClockFreq+0x48>)
 80023be:	607b      	str	r3, [r7, #4]
      break;
 80023c0:	bf00      	nop
  }

  return frequency;
 80023c2:	687b      	ldr	r3, [r7, #4]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	00f42400 	.word	0x00f42400
 80023d0:	017d7840 	.word	0x017d7840

080023d4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80023dc:	f7ff ff4a 	bl	8002274 <LL_RCC_GetAHBPrescaler>
 80023e0:	4603      	mov	r3, r0
 80023e2:	091b      	lsrs	r3, r3, #4
 80023e4:	f003 030f 	and.w	r3, r3, #15
 80023e8:	4a04      	ldr	r2, [pc, #16]	; (80023fc <RCC_GetHCLKClockFreq+0x28>)
 80023ea:	5cd3      	ldrb	r3, [r2, r3]
 80023ec:	461a      	mov	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	40d3      	lsrs	r3, r2
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	08002b68 	.word	0x08002b68

08002400 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002408:	f7ff ff42 	bl	8002290 <LL_RCC_GetAPB1Prescaler>
 800240c:	4603      	mov	r3, r0
 800240e:	0a9b      	lsrs	r3, r3, #10
 8002410:	4a04      	ldr	r2, [pc, #16]	; (8002424 <RCC_GetPCLK1ClockFreq+0x24>)
 8002412:	5cd3      	ldrb	r3, [r2, r3]
 8002414:	461a      	mov	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	40d3      	lsrs	r3, r2
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	08002b78 	.word	0x08002b78

08002428 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002430:	f7ff ff3c 	bl	80022ac <LL_RCC_GetAPB2Prescaler>
 8002434:	4603      	mov	r3, r0
 8002436:	0b5b      	lsrs	r3, r3, #13
 8002438:	4a04      	ldr	r2, [pc, #16]	; (800244c <RCC_GetPCLK2ClockFreq+0x24>)
 800243a:	5cd3      	ldrb	r3, [r2, r3]
 800243c:	461a      	mov	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	40d3      	lsrs	r3, r2
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	08002b78 	.word	0x08002b78

08002450 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002450:	b590      	push	{r4, r7, lr}
 8002452:	b087      	sub	sp, #28
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
 800245c:	2300      	movs	r3, #0
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	2300      	movs	r3, #0
 8002462:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002464:	f7ff ff30 	bl	80022c8 <LL_RCC_PLL_GetMainSource>
 8002468:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d004      	beq.n	800247a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002476:	d003      	beq.n	8002480 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8002478:	e005      	b.n	8002486 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800247c:	617b      	str	r3, [r7, #20]
      break;
 800247e:	e005      	b.n	800248c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002480:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002482:	617b      	str	r3, [r7, #20]
      break;
 8002484:	e002      	b.n	800248c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8002486:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002488:	617b      	str	r3, [r7, #20]
      break;
 800248a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b08      	cmp	r3, #8
 8002490:	d113      	bne.n	80024ba <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002492:	f7ff ff43 	bl	800231c <LL_RCC_PLL_GetDivider>
 8002496:	4602      	mov	r2, r0
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	fbb3 f4f2 	udiv	r4, r3, r2
 800249e:	f7ff ff21 	bl	80022e4 <LL_RCC_PLL_GetN>
 80024a2:	4603      	mov	r3, r0
 80024a4:	fb03 f404 	mul.w	r4, r3, r4
 80024a8:	f7ff ff2a 	bl	8002300 <LL_RCC_PLL_GetP>
 80024ac:	4603      	mov	r3, r0
 80024ae:	0c1b      	lsrs	r3, r3, #16
 80024b0:	3301      	adds	r3, #1
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	fbb4 f3f3 	udiv	r3, r4, r3
 80024b8:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80024ba:	693b      	ldr	r3, [r7, #16]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	371c      	adds	r7, #28
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd90      	pop	{r4, r7, pc}
 80024c4:	00f42400 	.word	0x00f42400
 80024c8:	017d7840 	.word	0x017d7840

080024cc <LL_USART_IsEnabled>:
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024e0:	bf0c      	ite	eq
 80024e2:	2301      	moveq	r3, #1
 80024e4:	2300      	movne	r3, #0
 80024e6:	b2db      	uxtb	r3, r3
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <LL_USART_SetStopBitsLength>:
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	611a      	str	r2, [r3, #16]
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <LL_USART_SetHWFlowCtrl>:
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	615a      	str	r2, [r3, #20]
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <LL_USART_SetBaudRate>:
{
 8002540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002544:	b0c0      	sub	sp, #256	; 0x100
 8002546:	af00      	add	r7, sp, #0
 8002548:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800254c:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8002550:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002554:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800255c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002560:	f040 810c 	bne.w	800277c <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002564:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002568:	2200      	movs	r2, #0
 800256a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800256e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002572:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002576:	4622      	mov	r2, r4
 8002578:	462b      	mov	r3, r5
 800257a:	1891      	adds	r1, r2, r2
 800257c:	6639      	str	r1, [r7, #96]	; 0x60
 800257e:	415b      	adcs	r3, r3
 8002580:	667b      	str	r3, [r7, #100]	; 0x64
 8002582:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002586:	4621      	mov	r1, r4
 8002588:	eb12 0801 	adds.w	r8, r2, r1
 800258c:	4629      	mov	r1, r5
 800258e:	eb43 0901 	adc.w	r9, r3, r1
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	f04f 0300 	mov.w	r3, #0
 800259a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800259e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025a6:	4690      	mov	r8, r2
 80025a8:	4699      	mov	r9, r3
 80025aa:	4623      	mov	r3, r4
 80025ac:	eb18 0303 	adds.w	r3, r8, r3
 80025b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80025b4:	462b      	mov	r3, r5
 80025b6:	eb49 0303 	adc.w	r3, r9, r3
 80025ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80025be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80025c2:	2200      	movs	r2, #0
 80025c4:	469a      	mov	sl, r3
 80025c6:	4693      	mov	fp, r2
 80025c8:	eb1a 030a 	adds.w	r3, sl, sl
 80025cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80025ce:	eb4b 030b 	adc.w	r3, fp, fp
 80025d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80025d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80025dc:	f7fd fdf4 	bl	80001c8 <__aeabi_uldivmod>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4b64      	ldr	r3, [pc, #400]	; (8002778 <LL_USART_SetBaudRate+0x238>)
 80025e6:	fba3 2302 	umull	r2, r3, r3, r2
 80025ea:	095b      	lsrs	r3, r3, #5
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	b29c      	uxth	r4, r3
 80025f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80025f6:	2200      	movs	r2, #0
 80025f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80025fc:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002600:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8002604:	4642      	mov	r2, r8
 8002606:	464b      	mov	r3, r9
 8002608:	1891      	adds	r1, r2, r2
 800260a:	6539      	str	r1, [r7, #80]	; 0x50
 800260c:	415b      	adcs	r3, r3
 800260e:	657b      	str	r3, [r7, #84]	; 0x54
 8002610:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002614:	4641      	mov	r1, r8
 8002616:	1851      	adds	r1, r2, r1
 8002618:	64b9      	str	r1, [r7, #72]	; 0x48
 800261a:	4649      	mov	r1, r9
 800261c:	414b      	adcs	r3, r1
 800261e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	f04f 0300 	mov.w	r3, #0
 8002628:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 800262c:	4659      	mov	r1, fp
 800262e:	00cb      	lsls	r3, r1, #3
 8002630:	4651      	mov	r1, sl
 8002632:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002636:	4651      	mov	r1, sl
 8002638:	00ca      	lsls	r2, r1, #3
 800263a:	4610      	mov	r0, r2
 800263c:	4619      	mov	r1, r3
 800263e:	4603      	mov	r3, r0
 8002640:	4642      	mov	r2, r8
 8002642:	189b      	adds	r3, r3, r2
 8002644:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002648:	464b      	mov	r3, r9
 800264a:	460a      	mov	r2, r1
 800264c:	eb42 0303 	adc.w	r3, r2, r3
 8002650:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002654:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002658:	2200      	movs	r2, #0
 800265a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800265e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8002662:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002666:	460b      	mov	r3, r1
 8002668:	18db      	adds	r3, r3, r3
 800266a:	643b      	str	r3, [r7, #64]	; 0x40
 800266c:	4613      	mov	r3, r2
 800266e:	eb42 0303 	adc.w	r3, r2, r3
 8002672:	647b      	str	r3, [r7, #68]	; 0x44
 8002674:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002678:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800267c:	f7fd fda4 	bl	80001c8 <__aeabi_uldivmod>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4611      	mov	r1, r2
 8002686:	4b3c      	ldr	r3, [pc, #240]	; (8002778 <LL_USART_SetBaudRate+0x238>)
 8002688:	fba3 2301 	umull	r2, r3, r3, r1
 800268c:	095b      	lsrs	r3, r3, #5
 800268e:	2264      	movs	r2, #100	; 0x64
 8002690:	fb02 f303 	mul.w	r3, r2, r3
 8002694:	1acb      	subs	r3, r1, r3
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800269c:	4b36      	ldr	r3, [pc, #216]	; (8002778 <LL_USART_SetBaudRate+0x238>)
 800269e:	fba3 2302 	umull	r2, r3, r3, r2
 80026a2:	095b      	lsrs	r3, r3, #5
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	4423      	add	r3, r4
 80026b2:	b29c      	uxth	r4, r3
 80026b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80026b8:	2200      	movs	r2, #0
 80026ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80026be:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80026c2:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 80026c6:	4642      	mov	r2, r8
 80026c8:	464b      	mov	r3, r9
 80026ca:	1891      	adds	r1, r2, r2
 80026cc:	63b9      	str	r1, [r7, #56]	; 0x38
 80026ce:	415b      	adcs	r3, r3
 80026d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026d2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80026d6:	4641      	mov	r1, r8
 80026d8:	1851      	adds	r1, r2, r1
 80026da:	6339      	str	r1, [r7, #48]	; 0x30
 80026dc:	4649      	mov	r1, r9
 80026de:	414b      	adcs	r3, r1
 80026e0:	637b      	str	r3, [r7, #52]	; 0x34
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80026ee:	4659      	mov	r1, fp
 80026f0:	00cb      	lsls	r3, r1, #3
 80026f2:	4651      	mov	r1, sl
 80026f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026f8:	4651      	mov	r1, sl
 80026fa:	00ca      	lsls	r2, r1, #3
 80026fc:	4610      	mov	r0, r2
 80026fe:	4619      	mov	r1, r3
 8002700:	4603      	mov	r3, r0
 8002702:	4642      	mov	r2, r8
 8002704:	189b      	adds	r3, r3, r2
 8002706:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800270a:	464b      	mov	r3, r9
 800270c:	460a      	mov	r2, r1
 800270e:	eb42 0303 	adc.w	r3, r2, r3
 8002712:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002716:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800271a:	2200      	movs	r2, #0
 800271c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002720:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002724:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002728:	460b      	mov	r3, r1
 800272a:	18db      	adds	r3, r3, r3
 800272c:	62bb      	str	r3, [r7, #40]	; 0x28
 800272e:	4613      	mov	r3, r2
 8002730:	eb42 0303 	adc.w	r3, r2, r3
 8002734:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002736:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800273a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800273e:	f7fd fd43 	bl	80001c8 <__aeabi_uldivmod>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <LL_USART_SetBaudRate+0x238>)
 8002748:	fba3 1302 	umull	r1, r3, r3, r2
 800274c:	095b      	lsrs	r3, r3, #5
 800274e:	2164      	movs	r1, #100	; 0x64
 8002750:	fb01 f303 	mul.w	r3, r1, r3
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	3332      	adds	r3, #50	; 0x32
 800275a:	4a07      	ldr	r2, [pc, #28]	; (8002778 <LL_USART_SetBaudRate+0x238>)
 800275c:	fba2 2303 	umull	r2, r3, r2, r3
 8002760:	095b      	lsrs	r3, r3, #5
 8002762:	b29b      	uxth	r3, r3
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	b29b      	uxth	r3, r3
 800276a:	4423      	add	r3, r4
 800276c:	b29b      	uxth	r3, r3
 800276e:	461a      	mov	r2, r3
 8002770:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002774:	609a      	str	r2, [r3, #8]
}
 8002776:	e107      	b.n	8002988 <LL_USART_SetBaudRate+0x448>
 8002778:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800277c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002780:	2200      	movs	r2, #0
 8002782:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002786:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800278a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 800278e:	4642      	mov	r2, r8
 8002790:	464b      	mov	r3, r9
 8002792:	1891      	adds	r1, r2, r2
 8002794:	6239      	str	r1, [r7, #32]
 8002796:	415b      	adcs	r3, r3
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
 800279a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800279e:	4641      	mov	r1, r8
 80027a0:	1854      	adds	r4, r2, r1
 80027a2:	4649      	mov	r1, r9
 80027a4:	eb43 0501 	adc.w	r5, r3, r1
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	00eb      	lsls	r3, r5, #3
 80027b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027b6:	00e2      	lsls	r2, r4, #3
 80027b8:	4614      	mov	r4, r2
 80027ba:	461d      	mov	r5, r3
 80027bc:	4643      	mov	r3, r8
 80027be:	18e3      	adds	r3, r4, r3
 80027c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80027c4:	464b      	mov	r3, r9
 80027c6:	eb45 0303 	adc.w	r3, r5, r3
 80027ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80027ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80027d2:	2200      	movs	r2, #0
 80027d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80027d8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80027e8:	4629      	mov	r1, r5
 80027ea:	008b      	lsls	r3, r1, #2
 80027ec:	4621      	mov	r1, r4
 80027ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027f2:	4621      	mov	r1, r4
 80027f4:	008a      	lsls	r2, r1, #2
 80027f6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80027fa:	f7fd fce5 	bl	80001c8 <__aeabi_uldivmod>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4b64      	ldr	r3, [pc, #400]	; (8002994 <LL_USART_SetBaudRate+0x454>)
 8002804:	fba3 2302 	umull	r2, r3, r3, r2
 8002808:	095b      	lsrs	r3, r3, #5
 800280a:	b29b      	uxth	r3, r3
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	b29c      	uxth	r4, r3
 8002810:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002814:	2200      	movs	r2, #0
 8002816:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800281a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800281e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8002822:	4642      	mov	r2, r8
 8002824:	464b      	mov	r3, r9
 8002826:	1891      	adds	r1, r2, r2
 8002828:	61b9      	str	r1, [r7, #24]
 800282a:	415b      	adcs	r3, r3
 800282c:	61fb      	str	r3, [r7, #28]
 800282e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002832:	4641      	mov	r1, r8
 8002834:	1851      	adds	r1, r2, r1
 8002836:	6139      	str	r1, [r7, #16]
 8002838:	4649      	mov	r1, r9
 800283a:	414b      	adcs	r3, r1
 800283c:	617b      	str	r3, [r7, #20]
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800284a:	4659      	mov	r1, fp
 800284c:	00cb      	lsls	r3, r1, #3
 800284e:	4651      	mov	r1, sl
 8002850:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002854:	4651      	mov	r1, sl
 8002856:	00ca      	lsls	r2, r1, #3
 8002858:	4610      	mov	r0, r2
 800285a:	4619      	mov	r1, r3
 800285c:	4603      	mov	r3, r0
 800285e:	4642      	mov	r2, r8
 8002860:	189b      	adds	r3, r3, r2
 8002862:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002866:	464b      	mov	r3, r9
 8002868:	460a      	mov	r2, r1
 800286a:	eb42 0303 	adc.w	r3, r2, r3
 800286e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002872:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002876:	2200      	movs	r2, #0
 8002878:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800287c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 800288c:	4649      	mov	r1, r9
 800288e:	008b      	lsls	r3, r1, #2
 8002890:	4641      	mov	r1, r8
 8002892:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002896:	4641      	mov	r1, r8
 8002898:	008a      	lsls	r2, r1, #2
 800289a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800289e:	f7fd fc93 	bl	80001c8 <__aeabi_uldivmod>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4b3b      	ldr	r3, [pc, #236]	; (8002994 <LL_USART_SetBaudRate+0x454>)
 80028a8:	fba3 1302 	umull	r1, r3, r3, r2
 80028ac:	095b      	lsrs	r3, r3, #5
 80028ae:	2164      	movs	r1, #100	; 0x64
 80028b0:	fb01 f303 	mul.w	r3, r1, r3
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	3332      	adds	r3, #50	; 0x32
 80028ba:	4a36      	ldr	r2, [pc, #216]	; (8002994 <LL_USART_SetBaudRate+0x454>)
 80028bc:	fba2 2303 	umull	r2, r3, r2, r3
 80028c0:	095b      	lsrs	r3, r3, #5
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	4423      	add	r3, r4
 80028cc:	b29c      	uxth	r4, r3
 80028ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80028d2:	2200      	movs	r2, #0
 80028d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80028d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80028d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80028dc:	4642      	mov	r2, r8
 80028de:	464b      	mov	r3, r9
 80028e0:	1891      	adds	r1, r2, r2
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	415b      	adcs	r3, r3
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028ec:	4641      	mov	r1, r8
 80028ee:	1851      	adds	r1, r2, r1
 80028f0:	6039      	str	r1, [r7, #0]
 80028f2:	4649      	mov	r1, r9
 80028f4:	414b      	adcs	r3, r1
 80028f6:	607b      	str	r3, [r7, #4]
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002904:	4659      	mov	r1, fp
 8002906:	00cb      	lsls	r3, r1, #3
 8002908:	4651      	mov	r1, sl
 800290a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800290e:	4651      	mov	r1, sl
 8002910:	00ca      	lsls	r2, r1, #3
 8002912:	4610      	mov	r0, r2
 8002914:	4619      	mov	r1, r3
 8002916:	4603      	mov	r3, r0
 8002918:	4642      	mov	r2, r8
 800291a:	189b      	adds	r3, r3, r2
 800291c:	673b      	str	r3, [r7, #112]	; 0x70
 800291e:	464b      	mov	r3, r9
 8002920:	460a      	mov	r2, r1
 8002922:	eb42 0303 	adc.w	r3, r2, r3
 8002926:	677b      	str	r3, [r7, #116]	; 0x74
 8002928:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800292c:	2200      	movs	r2, #0
 800292e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002930:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 800293e:	4649      	mov	r1, r9
 8002940:	008b      	lsls	r3, r1, #2
 8002942:	4641      	mov	r1, r8
 8002944:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002948:	4641      	mov	r1, r8
 800294a:	008a      	lsls	r2, r1, #2
 800294c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002950:	f7fd fc3a 	bl	80001c8 <__aeabi_uldivmod>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <LL_USART_SetBaudRate+0x454>)
 800295a:	fba3 1302 	umull	r1, r3, r3, r2
 800295e:	095b      	lsrs	r3, r3, #5
 8002960:	2164      	movs	r1, #100	; 0x64
 8002962:	fb01 f303 	mul.w	r3, r1, r3
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	3332      	adds	r3, #50	; 0x32
 800296c:	4a09      	ldr	r2, [pc, #36]	; (8002994 <LL_USART_SetBaudRate+0x454>)
 800296e:	fba2 2303 	umull	r2, r3, r2, r3
 8002972:	095b      	lsrs	r3, r3, #5
 8002974:	b29b      	uxth	r3, r3
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	b29b      	uxth	r3, r3
 800297c:	4423      	add	r3, r4
 800297e:	b29b      	uxth	r3, r3
 8002980:	461a      	mov	r2, r3
 8002982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002986:	609a      	str	r2, [r3, #8]
}
 8002988:	bf00      	nop
 800298a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800298e:	46bd      	mov	sp, r7
 8002990:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002994:	51eb851f 	.word	0x51eb851f

08002998 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b088      	sub	sp, #32
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff fd8e 	bl	80024cc <LL_USART_IsEnabled>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d15e      	bne.n	8002a74 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80029be:	f023 030c 	bic.w	r3, r3, #12
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	6851      	ldr	r1, [r2, #4]
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	68d2      	ldr	r2, [r2, #12]
 80029ca:	4311      	orrs	r1, r2
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	6912      	ldr	r2, [r2, #16]
 80029d0:	4311      	orrs	r1, r2
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	6992      	ldr	r2, [r2, #24]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	4619      	mov	r1, r3
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff fd85 	bl	80024f4 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	4619      	mov	r1, r3
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7ff fd92 	bl	800251a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80029f6:	f107 0308 	add.w	r3, r7, #8
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff fc9c 	bl	8002338 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a1f      	ldr	r2, [pc, #124]	; (8002a80 <LL_USART_Init+0xe8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d102      	bne.n	8002a0e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	61bb      	str	r3, [r7, #24]
 8002a0c:	e021      	b.n	8002a52 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a1c      	ldr	r2, [pc, #112]	; (8002a84 <LL_USART_Init+0xec>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d102      	bne.n	8002a1c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	61bb      	str	r3, [r7, #24]
 8002a1a:	e01a      	b.n	8002a52 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a1a      	ldr	r2, [pc, #104]	; (8002a88 <LL_USART_Init+0xf0>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d102      	bne.n	8002a2a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	61bb      	str	r3, [r7, #24]
 8002a28:	e013      	b.n	8002a52 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a17      	ldr	r2, [pc, #92]	; (8002a8c <LL_USART_Init+0xf4>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d102      	bne.n	8002a38 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	61bb      	str	r3, [r7, #24]
 8002a36:	e00c      	b.n	8002a52 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a15      	ldr	r2, [pc, #84]	; (8002a90 <LL_USART_Init+0xf8>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d102      	bne.n	8002a46 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	61bb      	str	r3, [r7, #24]
 8002a44:	e005      	b.n	8002a52 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a12      	ldr	r2, [pc, #72]	; (8002a94 <LL_USART_Init+0xfc>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d101      	bne.n	8002a52 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00d      	beq.n	8002a74 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d009      	beq.n	8002a74 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8002a60:	2300      	movs	r3, #0
 8002a62:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	699a      	ldr	r2, [r3, #24]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	69b9      	ldr	r1, [r7, #24]
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff fd66 	bl	8002540 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002a74:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3720      	adds	r7, #32
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40011000 	.word	0x40011000
 8002a84:	40004400 	.word	0x40004400
 8002a88:	40004800 	.word	0x40004800
 8002a8c:	40011400 	.word	0x40011400
 8002a90:	40004c00 	.word	0x40004c00
 8002a94:	40005000 	.word	0x40005000

08002a98 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aaa:	4a07      	ldr	r2, [pc, #28]	; (8002ac8 <LL_InitTick+0x30>)
 8002aac:	3b01      	subs	r3, #1
 8002aae:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002ab0:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <LL_InitTick+0x30>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ab6:	4b04      	ldr	r3, [pc, #16]	; (8002ac8 <LL_InitTick+0x30>)
 8002ab8:	2205      	movs	r2, #5
 8002aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	e000e010 	.word	0xe000e010

08002acc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002ad4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7ff ffdd 	bl	8002a98 <LL_InitTick>
}
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002af0:	4a04      	ldr	r2, [pc, #16]	; (8002b04 <LL_SetSystemCoreClock+0x1c>)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6013      	str	r3, [r2, #0]
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	20000000 	.word	0x20000000

08002b08 <__libc_init_array>:
 8002b08:	b570      	push	{r4, r5, r6, lr}
 8002b0a:	4d0d      	ldr	r5, [pc, #52]	; (8002b40 <__libc_init_array+0x38>)
 8002b0c:	4c0d      	ldr	r4, [pc, #52]	; (8002b44 <__libc_init_array+0x3c>)
 8002b0e:	1b64      	subs	r4, r4, r5
 8002b10:	10a4      	asrs	r4, r4, #2
 8002b12:	2600      	movs	r6, #0
 8002b14:	42a6      	cmp	r6, r4
 8002b16:	d109      	bne.n	8002b2c <__libc_init_array+0x24>
 8002b18:	4d0b      	ldr	r5, [pc, #44]	; (8002b48 <__libc_init_array+0x40>)
 8002b1a:	4c0c      	ldr	r4, [pc, #48]	; (8002b4c <__libc_init_array+0x44>)
 8002b1c:	f000 f818 	bl	8002b50 <_init>
 8002b20:	1b64      	subs	r4, r4, r5
 8002b22:	10a4      	asrs	r4, r4, #2
 8002b24:	2600      	movs	r6, #0
 8002b26:	42a6      	cmp	r6, r4
 8002b28:	d105      	bne.n	8002b36 <__libc_init_array+0x2e>
 8002b2a:	bd70      	pop	{r4, r5, r6, pc}
 8002b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b30:	4798      	blx	r3
 8002b32:	3601      	adds	r6, #1
 8002b34:	e7ee      	b.n	8002b14 <__libc_init_array+0xc>
 8002b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b3a:	4798      	blx	r3
 8002b3c:	3601      	adds	r6, #1
 8002b3e:	e7f2      	b.n	8002b26 <__libc_init_array+0x1e>
 8002b40:	08002b88 	.word	0x08002b88
 8002b44:	08002b88 	.word	0x08002b88
 8002b48:	08002b88 	.word	0x08002b88
 8002b4c:	08002b90 	.word	0x08002b90

08002b50 <_init>:
 8002b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b52:	bf00      	nop
 8002b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b56:	bc08      	pop	{r3}
 8002b58:	469e      	mov	lr, r3
 8002b5a:	4770      	bx	lr

08002b5c <_fini>:
 8002b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b5e:	bf00      	nop
 8002b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b62:	bc08      	pop	{r3}
 8002b64:	469e      	mov	lr, r3
 8002b66:	4770      	bx	lr
